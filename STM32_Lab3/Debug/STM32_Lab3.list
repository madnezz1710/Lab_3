
STM32_Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d64  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002e70  08002e70  00012e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e94  08002e94  0002004c  2**0
                  CONTENTS
  4 .ARM          00000000  08002e94  08002e94  0002004c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e94  08002e94  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e94  08002e94  00012e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e98  08002e98  00012e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  08002e9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  2000004c  08002ee8  0002004c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08002ee8  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009767  00000000  00000000  00020075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b98  00000000  00000000  000297dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  0002b378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000970  00000000  00000000  0002bdf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e01  00000000  00000000  0002c760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bbd7  00000000  00000000  00043561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008267b  00000000  00000000  0004f138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d17b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002958  00000000  00000000  000d1808  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000004c 	.word	0x2000004c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e58 	.word	0x08002e58

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000050 	.word	0x20000050
 8000148:	08002e58 	.word	0x08002e58

0800014c <isButtonPressed>:
	HAL_GPIO_WritePin(BUTTON_1_GPIO_Port, BUTTON_1_Pin, BUTTON_IS_RELEASED);
	HAL_GPIO_WritePin(BUTTON_2_GPIO_Port, BUTTON_2_Pin, BUTTON_IS_RELEASED);
	HAL_GPIO_WritePin(BUTTON_3_GPIO_Port, BUTTON_3_Pin, BUTTON_IS_RELEASED);
}

int isButtonPressed(int index) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (button_flag[index] == 1) {
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	200000b8 	.word	0x200000b8

08000180 <subKeyProcess>:

void subKeyProcess(int index) {
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	200000b8 	.word	0x200000b8

080001a0 <getKeyInput>:

void getKeyInput() {
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e08a      	b.n	80002c2 <getKeyInput+0x122>
		debounceButtonBuffer1[i] = debounceButtonBuffer2[i];
 80001ac:	4a49      	ldr	r2, [pc, #292]	; (80002d4 <getKeyInput+0x134>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	4948      	ldr	r1, [pc, #288]	; (80002d8 <getKeyInput+0x138>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		debounceButtonBuffer2[i] = buttonBuffer[i];
 80001bc:	4a47      	ldr	r2, [pc, #284]	; (80002dc <getKeyInput+0x13c>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4943      	ldr	r1, [pc, #268]	; (80002d4 <getKeyInput+0x134>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//Read signal from user
		if (i == 0) {
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d10a      	bne.n	80001e8 <getKeyInput+0x48>
			buttonBuffer[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port,
 80001d2:	2101      	movs	r1, #1
 80001d4:	4842      	ldr	r0, [pc, #264]	; (80002e0 <getKeyInput+0x140>)
 80001d6:	f001 fe2b 	bl	8001e30 <HAL_GPIO_ReadPin>
 80001da:	4603      	mov	r3, r0
 80001dc:	4619      	mov	r1, r3
 80001de:	4a3f      	ldr	r2, [pc, #252]	; (80002dc <getKeyInput+0x13c>)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80001e6:	e01a      	b.n	800021e <getKeyInput+0x7e>
			BUTTON_1_Pin);
		} else if (i == 1) {
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2b01      	cmp	r3, #1
 80001ec:	d10a      	bne.n	8000204 <getKeyInput+0x64>
			buttonBuffer[i] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port,
 80001ee:	2102      	movs	r1, #2
 80001f0:	483b      	ldr	r0, [pc, #236]	; (80002e0 <getKeyInput+0x140>)
 80001f2:	f001 fe1d 	bl	8001e30 <HAL_GPIO_ReadPin>
 80001f6:	4603      	mov	r3, r0
 80001f8:	4619      	mov	r1, r3
 80001fa:	4a38      	ldr	r2, [pc, #224]	; (80002dc <getKeyInput+0x13c>)
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000202:	e00c      	b.n	800021e <getKeyInput+0x7e>
			BUTTON_2_Pin);
		} else if (i == 2) {
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	2b02      	cmp	r3, #2
 8000208:	d109      	bne.n	800021e <getKeyInput+0x7e>
			buttonBuffer[i] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port,
 800020a:	2104      	movs	r1, #4
 800020c:	4834      	ldr	r0, [pc, #208]	; (80002e0 <getKeyInput+0x140>)
 800020e:	f001 fe0f 	bl	8001e30 <HAL_GPIO_ReadPin>
 8000212:	4603      	mov	r3, r0
 8000214:	4619      	mov	r1, r3
 8000216:	4a31      	ldr	r2, [pc, #196]	; (80002dc <getKeyInput+0x13c>)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			BUTTON_3_Pin);
		}
		//debouncing step
		if ((debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
 800021e:	4a2e      	ldr	r2, [pc, #184]	; (80002d8 <getKeyInput+0x138>)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000226:	492b      	ldr	r1, [pc, #172]	; (80002d4 <getKeyInput+0x134>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800022e:	429a      	cmp	r2, r3
 8000230:	d144      	bne.n	80002bc <getKeyInput+0x11c>
				&& (debounceButtonBuffer2[i] == buttonBuffer[i])) {
 8000232:	4a28      	ldr	r2, [pc, #160]	; (80002d4 <getKeyInput+0x134>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800023a:	4928      	ldr	r1, [pc, #160]	; (80002dc <getKeyInput+0x13c>)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000242:	429a      	cmp	r2, r3
 8000244:	d13a      	bne.n	80002bc <getKeyInput+0x11c>
			if (buttonBuffer[i] != longPressButtonBuffer[i]) {
 8000246:	4a25      	ldr	r2, [pc, #148]	; (80002dc <getKeyInput+0x13c>)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800024e:	4925      	ldr	r1, [pc, #148]	; (80002e4 <getKeyInput+0x144>)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000256:	429a      	cmp	r2, r3
 8000258:	d016      	beq.n	8000288 <getKeyInput+0xe8>
				longPressButtonBuffer[i] = buttonBuffer[i];
 800025a:	4a20      	ldr	r2, [pc, #128]	; (80002dc <getKeyInput+0x13c>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000262:	4920      	ldr	r1, [pc, #128]	; (80002e4 <getKeyInput+0x144>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				//when pressed, do subKeyProcess()
				if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 800026a:	4a1c      	ldr	r2, [pc, #112]	; (80002dc <getKeyInput+0x13c>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d122      	bne.n	80002bc <getKeyInput+0x11c>
					TimeOutForKeyPress[i] = TIME_OUT_FOR_KEY_PRESS;
 8000276:	4a1c      	ldr	r2, [pc, #112]	; (80002e8 <getKeyInput+0x148>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	21c8      	movs	r1, #200	; 0xc8
 800027c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					subKeyProcess(i);
 8000280:	6878      	ldr	r0, [r7, #4]
 8000282:	f7ff ff7d 	bl	8000180 <subKeyProcess>
 8000286:	e019      	b.n	80002bc <getKeyInput+0x11c>
				}
			}
			else {
				TimeOutForKeyPress[i]--;
 8000288:	4a17      	ldr	r2, [pc, #92]	; (80002e8 <getKeyInput+0x148>)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000290:	1e5a      	subs	r2, r3, #1
 8000292:	4915      	ldr	r1, [pc, #84]	; (80002e8 <getKeyInput+0x148>)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0) {
 800029a:	4a13      	ldr	r2, [pc, #76]	; (80002e8 <getKeyInput+0x148>)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d10a      	bne.n	80002bc <getKeyInput+0x11c>
					if(buttonBuffer[i]==BUTTON_IS_PRESSED)
 80002a6:	4a0d      	ldr	r2, [pc, #52]	; (80002dc <getKeyInput+0x13c>)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d104      	bne.n	80002bc <getKeyInput+0x11c>
//					subKeyProcess(i);
//					TimeOutForKeyPress[i] = TIME_OUT_FOR_KEY_PRESS;
					longPressButtonBuffer[i] = BUTTON_IS_RELEASED;
 80002b2:	4a0c      	ldr	r2, [pc, #48]	; (80002e4 <getKeyInput+0x144>)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	2101      	movs	r1, #1
 80002b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	3301      	adds	r3, #1
 80002c0:	607b      	str	r3, [r7, #4]
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	2b02      	cmp	r3, #2
 80002c6:	f77f af71 	ble.w	80001ac <getKeyInput+0xc>
				}
			}
		}
	}
}
 80002ca:	bf00      	nop
 80002cc:	bf00      	nop
 80002ce:	3708      	adds	r7, #8
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	20000018 	.word	0x20000018
 80002d8:	2000000c 	.word	0x2000000c
 80002dc:	20000000 	.word	0x20000000
 80002e0:	40010c00 	.word	0x40010c00
 80002e4:	20000024 	.word	0x20000024
 80002e8:	200000ac 	.word	0x200000ac

080002ec <updateRemainingTime>:
int LEDData = 0;
int SEGtimer=0;
int remaintime1=0;
int remaintime2=0;
int timemode=0;
void updateRemainingTime() {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	if(timer2_flag == 1){
 80002f0:	4b21      	ldr	r3, [pc, #132]	; (8000378 <updateRemainingTime+0x8c>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	2b01      	cmp	r3, #1
 80002f6:	d114      	bne.n	8000322 <updateRemainingTime+0x36>
		if (remaintime1 > 0) {
 80002f8:	4b20      	ldr	r3, [pc, #128]	; (800037c <updateRemainingTime+0x90>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	dd04      	ble.n	800030a <updateRemainingTime+0x1e>
			remaintime1--;
 8000300:	4b1e      	ldr	r3, [pc, #120]	; (800037c <updateRemainingTime+0x90>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	3b01      	subs	r3, #1
 8000306:	4a1d      	ldr	r2, [pc, #116]	; (800037c <updateRemainingTime+0x90>)
 8000308:	6013      	str	r3, [r2, #0]
		}
		if (remaintime2 > 0) {
 800030a:	4b1d      	ldr	r3, [pc, #116]	; (8000380 <updateRemainingTime+0x94>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	2b00      	cmp	r3, #0
 8000310:	dd04      	ble.n	800031c <updateRemainingTime+0x30>
			remaintime2--;
 8000312:	4b1b      	ldr	r3, [pc, #108]	; (8000380 <updateRemainingTime+0x94>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	3b01      	subs	r3, #1
 8000318:	4a19      	ldr	r2, [pc, #100]	; (8000380 <updateRemainingTime+0x94>)
 800031a:	6013      	str	r3, [r2, #0]
		}
 setTimer2(100);
 800031c:	2064      	movs	r0, #100	; 0x64
 800031e:	f001 f927 	bl	8001570 <setTimer2>
	}
	if(timer3_flag == 1){
 8000322:	4b18      	ldr	r3, [pc, #96]	; (8000384 <updateRemainingTime+0x98>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	2b01      	cmp	r3, #1
 8000328:	d122      	bne.n	8000370 <updateRemainingTime+0x84>
		SEGData = remaintime1;
 800032a:	4b14      	ldr	r3, [pc, #80]	; (800037c <updateRemainingTime+0x90>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	4a16      	ldr	r2, [pc, #88]	; (8000388 <updateRemainingTime+0x9c>)
 8000330:	6013      	str	r3, [r2, #0]
		LEDData = remaintime2;
 8000332:	4b13      	ldr	r3, [pc, #76]	; (8000380 <updateRemainingTime+0x94>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	4a15      	ldr	r2, [pc, #84]	; (800038c <updateRemainingTime+0xa0>)
 8000338:	6013      	str	r3, [r2, #0]
		segRun1();
 800033a:	f000 ffa1 	bl	8001280 <segRun1>
		switch(timemode){
 800033e:	4b14      	ldr	r3, [pc, #80]	; (8000390 <updateRemainingTime+0xa4>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d002      	beq.n	800034c <updateRemainingTime+0x60>
 8000346:	2b01      	cmp	r3, #1
 8000348:	d009      	beq.n	800035e <updateRemainingTime+0x72>
				timemode = 0;
				setTimer3(50);
				break;
		}
	}
}
 800034a:	e012      	b.n	8000372 <updateRemainingTime+0x86>
				segRun1();
 800034c:	f000 ff98 	bl	8001280 <segRun1>
				timemode = 1;
 8000350:	4b0f      	ldr	r3, [pc, #60]	; (8000390 <updateRemainingTime+0xa4>)
 8000352:	2201      	movs	r2, #1
 8000354:	601a      	str	r2, [r3, #0]
				setTimer3(50);
 8000356:	2032      	movs	r0, #50	; 0x32
 8000358:	f001 f938 	bl	80015cc <setTimer3>
				break;
 800035c:	e009      	b.n	8000372 <updateRemainingTime+0x86>
				segRun2();
 800035e:	f000 ffa3 	bl	80012a8 <segRun2>
				timemode = 0;
 8000362:	4b0b      	ldr	r3, [pc, #44]	; (8000390 <updateRemainingTime+0xa4>)
 8000364:	2200      	movs	r2, #0
 8000366:	601a      	str	r2, [r3, #0]
				setTimer3(50);
 8000368:	2032      	movs	r0, #50	; 0x32
 800036a:	f001 f92f 	bl	80015cc <setTimer3>
				break;
 800036e:	e000      	b.n	8000372 <updateRemainingTime+0x86>
	}
 8000370:	bf00      	nop
}
 8000372:	bf00      	nop
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	20000094 	.word	0x20000094
 800037c:	20000070 	.word	0x20000070
 8000380:	20000074 	.word	0x20000074
 8000384:	2000009c 	.word	0x2000009c
 8000388:	20000068 	.word	0x20000068
 800038c:	2000006c 	.word	0x2000006c
 8000390:	20000078 	.word	0x20000078

08000394 <fsm_automatic>:
void fsm_automatic() {
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af02      	add	r7, sp, #8
	if(isButtonPressed(0)==1){
 800039a:	2000      	movs	r0, #0
 800039c:	f7ff fed6 	bl	800014c <isButtonPressed>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b01      	cmp	r3, #1
 80003a4:	d106      	bne.n	80003b4 <fsm_automatic+0x20>
		state= MANUAL_RED;
 80003a6:	4b8f      	ldr	r3, [pc, #572]	; (80005e4 <fsm_automatic+0x250>)
 80003a8:	220c      	movs	r2, #12
 80003aa:	601a      	str	r2, [r3, #0]
		setTimer1(1000);
 80003ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003b0:	f001 f8b0 	bl	8001514 <setTimer1>
	}
	switch (state) {
 80003b4:	4b8b      	ldr	r3, [pc, #556]	; (80005e4 <fsm_automatic+0x250>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	3b65      	subs	r3, #101	; 0x65
 80003ba:	2b04      	cmp	r3, #4
 80003bc:	f200 810f 	bhi.w	80005de <fsm_automatic+0x24a>
 80003c0:	a201      	add	r2, pc, #4	; (adr r2, 80003c8 <fsm_automatic+0x34>)
 80003c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003c6:	bf00      	nop
 80003c8:	080003dd 	.word	0x080003dd
 80003cc:	08000443 	.word	0x08000443
 80003d0:	08000499 	.word	0x08000499
 80003d4:	08000503 	.word	0x08000503
 80003d8:	08000559 	.word	0x08000559
		case INIT:
			displaylight(0, 0, 0, 0, 0, 0);
 80003dc:	2300      	movs	r3, #0
 80003de:	9301      	str	r3, [sp, #4]
 80003e0:	2300      	movs	r3, #0
 80003e2:	9300      	str	r3, [sp, #0]
 80003e4:	2300      	movs	r3, #0
 80003e6:	2200      	movs	r2, #0
 80003e8:	2100      	movs	r1, #0
 80003ea:	2000      	movs	r0, #0
 80003ec:	f001 f9d8 	bl	80017a0 <displaylight>
			if(timer1_flag == 1){
 80003f0:	4b7d      	ldr	r3, [pc, #500]	; (80005e8 <fsm_automatic+0x254>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	2b01      	cmp	r3, #1
 80003f6:	f040 80f1 	bne.w	80005dc <fsm_automatic+0x248>
				setTimer1(300);
 80003fa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80003fe:	f001 f889 	bl	8001514 <setTimer1>
				state = AUTORED_GREEN;
 8000402:	4b78      	ldr	r3, [pc, #480]	; (80005e4 <fsm_automatic+0x250>)
 8000404:	2266      	movs	r2, #102	; 0x66
 8000406:	601a      	str	r2, [r3, #0]
				remaintime1=REDTIME/100;
 8000408:	4b78      	ldr	r3, [pc, #480]	; (80005ec <fsm_automatic+0x258>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4a78      	ldr	r2, [pc, #480]	; (80005f0 <fsm_automatic+0x25c>)
 800040e:	fb82 1203 	smull	r1, r2, r2, r3
 8000412:	1152      	asrs	r2, r2, #5
 8000414:	17db      	asrs	r3, r3, #31
 8000416:	1ad3      	subs	r3, r2, r3
 8000418:	4a76      	ldr	r2, [pc, #472]	; (80005f4 <fsm_automatic+0x260>)
 800041a:	6013      	str	r3, [r2, #0]
				remaintime2=GREENTIME/100;
 800041c:	4b76      	ldr	r3, [pc, #472]	; (80005f8 <fsm_automatic+0x264>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a73      	ldr	r2, [pc, #460]	; (80005f0 <fsm_automatic+0x25c>)
 8000422:	fb82 1203 	smull	r1, r2, r2, r3
 8000426:	1152      	asrs	r2, r2, #5
 8000428:	17db      	asrs	r3, r3, #31
 800042a:	1ad3      	subs	r3, r2, r3
 800042c:	4a73      	ldr	r2, [pc, #460]	; (80005fc <fsm_automatic+0x268>)
 800042e:	6013      	str	r3, [r2, #0]
				SEGData = remaintime1;
 8000430:	4b70      	ldr	r3, [pc, #448]	; (80005f4 <fsm_automatic+0x260>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a72      	ldr	r2, [pc, #456]	; (8000600 <fsm_automatic+0x26c>)
 8000436:	6013      	str	r3, [r2, #0]
				LEDData = remaintime2;
 8000438:	4b70      	ldr	r3, [pc, #448]	; (80005fc <fsm_automatic+0x268>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a71      	ldr	r2, [pc, #452]	; (8000604 <fsm_automatic+0x270>)
 800043e:	6013      	str	r3, [r2, #0]
			}
			break;
 8000440:	e0cc      	b.n	80005dc <fsm_automatic+0x248>
		case AUTORED_GREEN:
			displaylight(1, 0, 0, 0, 1, 0);
 8000442:	2300      	movs	r3, #0
 8000444:	9301      	str	r3, [sp, #4]
 8000446:	2301      	movs	r3, #1
 8000448:	9300      	str	r3, [sp, #0]
 800044a:	2300      	movs	r3, #0
 800044c:	2200      	movs	r2, #0
 800044e:	2100      	movs	r1, #0
 8000450:	2001      	movs	r0, #1
 8000452:	f001 f9a5 	bl	80017a0 <displaylight>

			if(timer1_flag == 1){
 8000456:	4b64      	ldr	r3, [pc, #400]	; (80005e8 <fsm_automatic+0x254>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	2b01      	cmp	r3, #1
 800045c:	d119      	bne.n	8000492 <fsm_automatic+0xfe>
				setTimer1(YELLOWTIME);
 800045e:	4b6a      	ldr	r3, [pc, #424]	; (8000608 <fsm_automatic+0x274>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4618      	mov	r0, r3
 8000464:	f001 f856 	bl	8001514 <setTimer1>
				state = AUTORED_YELLOW;
 8000468:	4b5e      	ldr	r3, [pc, #376]	; (80005e4 <fsm_automatic+0x250>)
 800046a:	2267      	movs	r2, #103	; 0x67
 800046c:	601a      	str	r2, [r3, #0]
				remaintime2=YELLOWTIME/100;
 800046e:	4b66      	ldr	r3, [pc, #408]	; (8000608 <fsm_automatic+0x274>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4a5f      	ldr	r2, [pc, #380]	; (80005f0 <fsm_automatic+0x25c>)
 8000474:	fb82 1203 	smull	r1, r2, r2, r3
 8000478:	1152      	asrs	r2, r2, #5
 800047a:	17db      	asrs	r3, r3, #31
 800047c:	1ad3      	subs	r3, r2, r3
 800047e:	4a5f      	ldr	r2, [pc, #380]	; (80005fc <fsm_automatic+0x268>)
 8000480:	6013      	str	r3, [r2, #0]
				SEGData = remaintime1;
 8000482:	4b5c      	ldr	r3, [pc, #368]	; (80005f4 <fsm_automatic+0x260>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a5e      	ldr	r2, [pc, #376]	; (8000600 <fsm_automatic+0x26c>)
 8000488:	6013      	str	r3, [r2, #0]
				LEDData = remaintime2;
 800048a:	4b5c      	ldr	r3, [pc, #368]	; (80005fc <fsm_automatic+0x268>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4a5d      	ldr	r2, [pc, #372]	; (8000604 <fsm_automatic+0x270>)
 8000490:	6013      	str	r3, [r2, #0]
			}
			updateRemainingTime();
 8000492:	f7ff ff2b 	bl	80002ec <updateRemainingTime>
			break;
 8000496:	e0a2      	b.n	80005de <fsm_automatic+0x24a>

		case AUTORED_YELLOW:
			displaylight(1, 0, 0, 0, 0, 1);
 8000498:	2301      	movs	r3, #1
 800049a:	9301      	str	r3, [sp, #4]
 800049c:	2300      	movs	r3, #0
 800049e:	9300      	str	r3, [sp, #0]
 80004a0:	2300      	movs	r3, #0
 80004a2:	2200      	movs	r2, #0
 80004a4:	2100      	movs	r1, #0
 80004a6:	2001      	movs	r0, #1
 80004a8:	f001 f97a 	bl	80017a0 <displaylight>
			if(timer1_flag == 1){
 80004ac:	4b4e      	ldr	r3, [pc, #312]	; (80005e8 <fsm_automatic+0x254>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	2b01      	cmp	r3, #1
 80004b2:	d123      	bne.n	80004fc <fsm_automatic+0x168>
				setTimer1(GREENTIME);
 80004b4:	4b50      	ldr	r3, [pc, #320]	; (80005f8 <fsm_automatic+0x264>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4618      	mov	r0, r3
 80004ba:	f001 f82b 	bl	8001514 <setTimer1>
				state = AUTOGREEN_RED;
 80004be:	4b49      	ldr	r3, [pc, #292]	; (80005e4 <fsm_automatic+0x250>)
 80004c0:	2268      	movs	r2, #104	; 0x68
 80004c2:	601a      	str	r2, [r3, #0]
				remaintime1=GREENTIME/100;
 80004c4:	4b4c      	ldr	r3, [pc, #304]	; (80005f8 <fsm_automatic+0x264>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a49      	ldr	r2, [pc, #292]	; (80005f0 <fsm_automatic+0x25c>)
 80004ca:	fb82 1203 	smull	r1, r2, r2, r3
 80004ce:	1152      	asrs	r2, r2, #5
 80004d0:	17db      	asrs	r3, r3, #31
 80004d2:	1ad3      	subs	r3, r2, r3
 80004d4:	4a47      	ldr	r2, [pc, #284]	; (80005f4 <fsm_automatic+0x260>)
 80004d6:	6013      	str	r3, [r2, #0]
				remaintime2=REDTIME/100;
 80004d8:	4b44      	ldr	r3, [pc, #272]	; (80005ec <fsm_automatic+0x258>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a44      	ldr	r2, [pc, #272]	; (80005f0 <fsm_automatic+0x25c>)
 80004de:	fb82 1203 	smull	r1, r2, r2, r3
 80004e2:	1152      	asrs	r2, r2, #5
 80004e4:	17db      	asrs	r3, r3, #31
 80004e6:	1ad3      	subs	r3, r2, r3
 80004e8:	4a44      	ldr	r2, [pc, #272]	; (80005fc <fsm_automatic+0x268>)
 80004ea:	6013      	str	r3, [r2, #0]
				SEGData = remaintime1;
 80004ec:	4b41      	ldr	r3, [pc, #260]	; (80005f4 <fsm_automatic+0x260>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a43      	ldr	r2, [pc, #268]	; (8000600 <fsm_automatic+0x26c>)
 80004f2:	6013      	str	r3, [r2, #0]
				LEDData = remaintime2;
 80004f4:	4b41      	ldr	r3, [pc, #260]	; (80005fc <fsm_automatic+0x268>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a42      	ldr	r2, [pc, #264]	; (8000604 <fsm_automatic+0x270>)
 80004fa:	6013      	str	r3, [r2, #0]
			}
			updateRemainingTime();
 80004fc:	f7ff fef6 	bl	80002ec <updateRemainingTime>
			break;
 8000500:	e06d      	b.n	80005de <fsm_automatic+0x24a>
		case AUTOGREEN_RED:
			displaylight(0, 1, 0, 1, 0, 0);
 8000502:	2300      	movs	r3, #0
 8000504:	9301      	str	r3, [sp, #4]
 8000506:	2300      	movs	r3, #0
 8000508:	9300      	str	r3, [sp, #0]
 800050a:	2301      	movs	r3, #1
 800050c:	2200      	movs	r2, #0
 800050e:	2101      	movs	r1, #1
 8000510:	2000      	movs	r0, #0
 8000512:	f001 f945 	bl	80017a0 <displaylight>
			if(timer1_flag == 1){
 8000516:	4b34      	ldr	r3, [pc, #208]	; (80005e8 <fsm_automatic+0x254>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	2b01      	cmp	r3, #1
 800051c:	d119      	bne.n	8000552 <fsm_automatic+0x1be>
				setTimer1(YELLOWTIME);
 800051e:	4b3a      	ldr	r3, [pc, #232]	; (8000608 <fsm_automatic+0x274>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4618      	mov	r0, r3
 8000524:	f000 fff6 	bl	8001514 <setTimer1>
				state = AUTOYELLOW_RED;
 8000528:	4b2e      	ldr	r3, [pc, #184]	; (80005e4 <fsm_automatic+0x250>)
 800052a:	2269      	movs	r2, #105	; 0x69
 800052c:	601a      	str	r2, [r3, #0]
				remaintime1=YELLOWTIME/100;
 800052e:	4b36      	ldr	r3, [pc, #216]	; (8000608 <fsm_automatic+0x274>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4a2f      	ldr	r2, [pc, #188]	; (80005f0 <fsm_automatic+0x25c>)
 8000534:	fb82 1203 	smull	r1, r2, r2, r3
 8000538:	1152      	asrs	r2, r2, #5
 800053a:	17db      	asrs	r3, r3, #31
 800053c:	1ad3      	subs	r3, r2, r3
 800053e:	4a2d      	ldr	r2, [pc, #180]	; (80005f4 <fsm_automatic+0x260>)
 8000540:	6013      	str	r3, [r2, #0]

				SEGData = remaintime1;
 8000542:	4b2c      	ldr	r3, [pc, #176]	; (80005f4 <fsm_automatic+0x260>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4a2e      	ldr	r2, [pc, #184]	; (8000600 <fsm_automatic+0x26c>)
 8000548:	6013      	str	r3, [r2, #0]
				LEDData = remaintime2;
 800054a:	4b2c      	ldr	r3, [pc, #176]	; (80005fc <fsm_automatic+0x268>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4a2d      	ldr	r2, [pc, #180]	; (8000604 <fsm_automatic+0x270>)
 8000550:	6013      	str	r3, [r2, #0]
			}
			updateRemainingTime();
 8000552:	f7ff fecb 	bl	80002ec <updateRemainingTime>
			break;
 8000556:	e042      	b.n	80005de <fsm_automatic+0x24a>
		case AUTOYELLOW_RED:
			if(isButtonPressed(0)==1){
 8000558:	2000      	movs	r0, #0
 800055a:	f7ff fdf7 	bl	800014c <isButtonPressed>
 800055e:	4603      	mov	r3, r0
 8000560:	2b01      	cmp	r3, #1
 8000562:	d106      	bne.n	8000572 <fsm_automatic+0x1de>
				state= MANUAL_RED;
 8000564:	4b1f      	ldr	r3, [pc, #124]	; (80005e4 <fsm_automatic+0x250>)
 8000566:	220c      	movs	r2, #12
 8000568:	601a      	str	r2, [r3, #0]
				setTimer1(500);
 800056a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800056e:	f000 ffd1 	bl	8001514 <setTimer1>
			}
			displaylight(0, 0, 1, 1, 0, 0);
 8000572:	2300      	movs	r3, #0
 8000574:	9301      	str	r3, [sp, #4]
 8000576:	2300      	movs	r3, #0
 8000578:	9300      	str	r3, [sp, #0]
 800057a:	2301      	movs	r3, #1
 800057c:	2201      	movs	r2, #1
 800057e:	2100      	movs	r1, #0
 8000580:	2000      	movs	r0, #0
 8000582:	f001 f90d 	bl	80017a0 <displaylight>
			if(timer1_flag == 1){
 8000586:	4b18      	ldr	r3, [pc, #96]	; (80005e8 <fsm_automatic+0x254>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2b01      	cmp	r3, #1
 800058c:	d123      	bne.n	80005d6 <fsm_automatic+0x242>
				setTimer1(GREENTIME);
 800058e:	4b1a      	ldr	r3, [pc, #104]	; (80005f8 <fsm_automatic+0x264>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4618      	mov	r0, r3
 8000594:	f000 ffbe 	bl	8001514 <setTimer1>
				state = AUTORED_GREEN;
 8000598:	4b12      	ldr	r3, [pc, #72]	; (80005e4 <fsm_automatic+0x250>)
 800059a:	2266      	movs	r2, #102	; 0x66
 800059c:	601a      	str	r2, [r3, #0]
				remaintime1=REDTIME/100;
 800059e:	4b13      	ldr	r3, [pc, #76]	; (80005ec <fsm_automatic+0x258>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a13      	ldr	r2, [pc, #76]	; (80005f0 <fsm_automatic+0x25c>)
 80005a4:	fb82 1203 	smull	r1, r2, r2, r3
 80005a8:	1152      	asrs	r2, r2, #5
 80005aa:	17db      	asrs	r3, r3, #31
 80005ac:	1ad3      	subs	r3, r2, r3
 80005ae:	4a11      	ldr	r2, [pc, #68]	; (80005f4 <fsm_automatic+0x260>)
 80005b0:	6013      	str	r3, [r2, #0]
				remaintime2=GREENTIME/100;
 80005b2:	4b11      	ldr	r3, [pc, #68]	; (80005f8 <fsm_automatic+0x264>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a0e      	ldr	r2, [pc, #56]	; (80005f0 <fsm_automatic+0x25c>)
 80005b8:	fb82 1203 	smull	r1, r2, r2, r3
 80005bc:	1152      	asrs	r2, r2, #5
 80005be:	17db      	asrs	r3, r3, #31
 80005c0:	1ad3      	subs	r3, r2, r3
 80005c2:	4a0e      	ldr	r2, [pc, #56]	; (80005fc <fsm_automatic+0x268>)
 80005c4:	6013      	str	r3, [r2, #0]
				SEGData = remaintime1;
 80005c6:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <fsm_automatic+0x260>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a0d      	ldr	r2, [pc, #52]	; (8000600 <fsm_automatic+0x26c>)
 80005cc:	6013      	str	r3, [r2, #0]
				LEDData = remaintime2;
 80005ce:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <fsm_automatic+0x268>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4a0c      	ldr	r2, [pc, #48]	; (8000604 <fsm_automatic+0x270>)
 80005d4:	6013      	str	r3, [r2, #0]
			}
			updateRemainingTime();
 80005d6:	f7ff fe89 	bl	80002ec <updateRemainingTime>
					break;
 80005da:	e000      	b.n	80005de <fsm_automatic+0x24a>
			break;
 80005dc:	bf00      	nop
				}
			}
 80005de:	bf00      	nop
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	20000030 	.word	0x20000030
 80005e8:	2000008c 	.word	0x2000008c
 80005ec:	2000003c 	.word	0x2000003c
 80005f0:	51eb851f 	.word	0x51eb851f
 80005f4:	20000070 	.word	0x20000070
 80005f8:	20000034 	.word	0x20000034
 80005fc:	20000074 	.word	0x20000074
 8000600:	20000068 	.word	0x20000068
 8000604:	2000006c 	.word	0x2000006c
 8000608:	20000038 	.word	0x20000038

0800060c <display_time>:
#include "fsm_manual.h"
int mode = 0;
int temp_red=0;
int temp_yellow=0;
int temp_green=0;
void display_time(int num){
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	int time=num;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	60fb      	str	r3, [r7, #12]
	if(timer4_flag==1){
 8000618:	4b16      	ldr	r3, [pc, #88]	; (8000674 <display_time+0x68>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d124      	bne.n	800066a <display_time+0x5e>
		switch (mode){
 8000620:	4b15      	ldr	r3, [pc, #84]	; (8000678 <display_time+0x6c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d002      	beq.n	800062e <display_time+0x22>
 8000628:	2b01      	cmp	r3, #1
 800062a:	d00f      	beq.n	800064c <display_time+0x40>
			mode =0;
			setTimer4(50);
			break;
		}
	}
}
 800062c:	e01e      	b.n	800066c <display_time+0x60>
			update7SEG(0, time);
 800062e:	68f9      	ldr	r1, [r7, #12]
 8000630:	2000      	movs	r0, #0
 8000632:	f000 fd95 	bl	8001160 <update7SEG>
			update7LED(0, time);
 8000636:	68f9      	ldr	r1, [r7, #12]
 8000638:	2000      	movs	r0, #0
 800063a:	f000 fdd9 	bl	80011f0 <update7LED>
			mode =1 ;
 800063e:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <display_time+0x6c>)
 8000640:	2201      	movs	r2, #1
 8000642:	601a      	str	r2, [r3, #0]
			setTimer4(50);
 8000644:	2032      	movs	r0, #50	; 0x32
 8000646:	f000 ffef 	bl	8001628 <setTimer4>
			break;
 800064a:	e00f      	b.n	800066c <display_time+0x60>
			update7SEG(1, time);
 800064c:	68f9      	ldr	r1, [r7, #12]
 800064e:	2001      	movs	r0, #1
 8000650:	f000 fd86 	bl	8001160 <update7SEG>
			update7LED(1, time);
 8000654:	68f9      	ldr	r1, [r7, #12]
 8000656:	2001      	movs	r0, #1
 8000658:	f000 fdca 	bl	80011f0 <update7LED>
			mode =0;
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <display_time+0x6c>)
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
			setTimer4(50);
 8000662:	2032      	movs	r0, #50	; 0x32
 8000664:	f000 ffe0 	bl	8001628 <setTimer4>
			break;
 8000668:	e000      	b.n	800066c <display_time+0x60>
	}
 800066a:	bf00      	nop
}
 800066c:	bf00      	nop
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	200000a4 	.word	0x200000a4
 8000678:	2000007c 	.word	0x2000007c

0800067c <fsm_manual>:
void fsm_manual(){
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af02      	add	r7, sp, #8


	switch (state){
 8000682:	4b8b      	ldr	r3, [pc, #556]	; (80008b0 <fsm_manual+0x234>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	2b0e      	cmp	r3, #14
 8000688:	f000 812c 	beq.w	80008e4 <fsm_manual+0x268>
 800068c:	2b0e      	cmp	r3, #14
 800068e:	f300 81c8 	bgt.w	8000a22 <fsm_manual+0x3a6>
 8000692:	2b0c      	cmp	r3, #12
 8000694:	d003      	beq.n	800069e <fsm_manual+0x22>
 8000696:	2b0d      	cmp	r3, #13
 8000698:	f000 8085 	beq.w	80007a6 <fsm_manual+0x12a>
                GREENTIME = temp_green * 100;
            }
		}
		break;
	default:
		break;
 800069c:	e1c1      	b.n	8000a22 <fsm_manual+0x3a6>
		 if (temp_red == 0) {
 800069e:	4b85      	ldr	r3, [pc, #532]	; (80008b4 <fsm_manual+0x238>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d109      	bne.n	80006ba <fsm_manual+0x3e>
		     temp_red = REDTIME / 100;
 80006a6:	4b84      	ldr	r3, [pc, #528]	; (80008b8 <fsm_manual+0x23c>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a84      	ldr	r2, [pc, #528]	; (80008bc <fsm_manual+0x240>)
 80006ac:	fb82 1203 	smull	r1, r2, r2, r3
 80006b0:	1152      	asrs	r2, r2, #5
 80006b2:	17db      	asrs	r3, r3, #31
 80006b4:	1ad3      	subs	r3, r2, r3
 80006b6:	4a7f      	ldr	r2, [pc, #508]	; (80008b4 <fsm_manual+0x238>)
 80006b8:	6013      	str	r3, [r2, #0]
		displaylight(1, 0, 0, 1, 0, 0);
 80006ba:	2300      	movs	r3, #0
 80006bc:	9301      	str	r3, [sp, #4]
 80006be:	2300      	movs	r3, #0
 80006c0:	9300      	str	r3, [sp, #0]
 80006c2:	2301      	movs	r3, #1
 80006c4:	2200      	movs	r2, #0
 80006c6:	2100      	movs	r1, #0
 80006c8:	2001      	movs	r0, #1
 80006ca:	f001 f869 	bl	80017a0 <displaylight>
		if(timer1_flag==1){
 80006ce:	4b7c      	ldr	r3, [pc, #496]	; (80008c0 <fsm_manual+0x244>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d123      	bne.n	800071e <fsm_manual+0xa2>
			state=AUTORED_GREEN;
 80006d6:	4b76      	ldr	r3, [pc, #472]	; (80008b0 <fsm_manual+0x234>)
 80006d8:	2266      	movs	r2, #102	; 0x66
 80006da:	601a      	str	r2, [r3, #0]
			setTimer1(GREENTIME);
 80006dc:	4b79      	ldr	r3, [pc, #484]	; (80008c4 <fsm_manual+0x248>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 ff17 	bl	8001514 <setTimer1>
			remaintime1=REDTIME/100;
 80006e6:	4b74      	ldr	r3, [pc, #464]	; (80008b8 <fsm_manual+0x23c>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4a74      	ldr	r2, [pc, #464]	; (80008bc <fsm_manual+0x240>)
 80006ec:	fb82 1203 	smull	r1, r2, r2, r3
 80006f0:	1152      	asrs	r2, r2, #5
 80006f2:	17db      	asrs	r3, r3, #31
 80006f4:	1ad3      	subs	r3, r2, r3
 80006f6:	4a74      	ldr	r2, [pc, #464]	; (80008c8 <fsm_manual+0x24c>)
 80006f8:	6013      	str	r3, [r2, #0]
			remaintime2=GREENTIME/100;
 80006fa:	4b72      	ldr	r3, [pc, #456]	; (80008c4 <fsm_manual+0x248>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a6f      	ldr	r2, [pc, #444]	; (80008bc <fsm_manual+0x240>)
 8000700:	fb82 1203 	smull	r1, r2, r2, r3
 8000704:	1152      	asrs	r2, r2, #5
 8000706:	17db      	asrs	r3, r3, #31
 8000708:	1ad3      	subs	r3, r2, r3
 800070a:	4a70      	ldr	r2, [pc, #448]	; (80008cc <fsm_manual+0x250>)
 800070c:	6013      	str	r3, [r2, #0]
			SEGData = remaintime1;
 800070e:	4b6e      	ldr	r3, [pc, #440]	; (80008c8 <fsm_manual+0x24c>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a6f      	ldr	r2, [pc, #444]	; (80008d0 <fsm_manual+0x254>)
 8000714:	6013      	str	r3, [r2, #0]
			LEDData = remaintime2;
 8000716:	4b6d      	ldr	r3, [pc, #436]	; (80008cc <fsm_manual+0x250>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a6e      	ldr	r2, [pc, #440]	; (80008d4 <fsm_manual+0x258>)
 800071c:	6013      	str	r3, [r2, #0]
		if(isButtonPressed(0)==1){
 800071e:	2000      	movs	r0, #0
 8000720:	f7ff fd14 	bl	800014c <isButtonPressed>
 8000724:	4603      	mov	r3, r0
 8000726:	2b01      	cmp	r3, #1
 8000728:	d106      	bne.n	8000738 <fsm_manual+0xbc>
			state = MANUAL_GREEN;
 800072a:	4b61      	ldr	r3, [pc, #388]	; (80008b0 <fsm_manual+0x234>)
 800072c:	220d      	movs	r2, #13
 800072e:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000730:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000734:	f000 feee 	bl	8001514 <setTimer1>
		if(isButtonPressed(1)==1){
 8000738:	2001      	movs	r0, #1
 800073a:	f7ff fd07 	bl	800014c <isButtonPressed>
 800073e:	4603      	mov	r3, r0
 8000740:	2b01      	cmp	r3, #1
 8000742:	d104      	bne.n	800074e <fsm_manual+0xd2>
			temp_red++;
 8000744:	4b5b      	ldr	r3, [pc, #364]	; (80008b4 <fsm_manual+0x238>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	3301      	adds	r3, #1
 800074a:	4a5a      	ldr	r2, [pc, #360]	; (80008b4 <fsm_manual+0x238>)
 800074c:	6013      	str	r3, [r2, #0]
		display_time(temp_red);
 800074e:	4b59      	ldr	r3, [pc, #356]	; (80008b4 <fsm_manual+0x238>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff ff5a 	bl	800060c <display_time>
		if(isButtonPressed(2)==1){
 8000758:	2002      	movs	r0, #2
 800075a:	f7ff fcf7 	bl	800014c <isButtonPressed>
 800075e:	4603      	mov	r3, r0
 8000760:	2b01      	cmp	r3, #1
 8000762:	f040 8160 	bne.w	8000a26 <fsm_manual+0x3aa>
            if (temp_red == temp_green + temp_yellow) {
 8000766:	4b5c      	ldr	r3, [pc, #368]	; (80008d8 <fsm_manual+0x25c>)
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	4b5c      	ldr	r3, [pc, #368]	; (80008dc <fsm_manual+0x260>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	441a      	add	r2, r3
 8000770:	4b50      	ldr	r3, [pc, #320]	; (80008b4 <fsm_manual+0x238>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	429a      	cmp	r2, r3
 8000776:	f040 8156 	bne.w	8000a26 <fsm_manual+0x3aa>
                REDTIME = temp_red * 100;
 800077a:	4b4e      	ldr	r3, [pc, #312]	; (80008b4 <fsm_manual+0x238>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	2264      	movs	r2, #100	; 0x64
 8000780:	fb02 f303 	mul.w	r3, r2, r3
 8000784:	4a4c      	ldr	r2, [pc, #304]	; (80008b8 <fsm_manual+0x23c>)
 8000786:	6013      	str	r3, [r2, #0]
                YELLOWTIME = temp_yellow * 100;
 8000788:	4b54      	ldr	r3, [pc, #336]	; (80008dc <fsm_manual+0x260>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2264      	movs	r2, #100	; 0x64
 800078e:	fb02 f303 	mul.w	r3, r2, r3
 8000792:	4a53      	ldr	r2, [pc, #332]	; (80008e0 <fsm_manual+0x264>)
 8000794:	6013      	str	r3, [r2, #0]
                GREENTIME = temp_green * 100;
 8000796:	4b50      	ldr	r3, [pc, #320]	; (80008d8 <fsm_manual+0x25c>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2264      	movs	r2, #100	; 0x64
 800079c:	fb02 f303 	mul.w	r3, r2, r3
 80007a0:	4a48      	ldr	r2, [pc, #288]	; (80008c4 <fsm_manual+0x248>)
 80007a2:	6013      	str	r3, [r2, #0]
		break;
 80007a4:	e13f      	b.n	8000a26 <fsm_manual+0x3aa>
        if (temp_green == 0) {
 80007a6:	4b4c      	ldr	r3, [pc, #304]	; (80008d8 <fsm_manual+0x25c>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d109      	bne.n	80007c2 <fsm_manual+0x146>
            temp_green = GREENTIME / 100;
 80007ae:	4b45      	ldr	r3, [pc, #276]	; (80008c4 <fsm_manual+0x248>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a42      	ldr	r2, [pc, #264]	; (80008bc <fsm_manual+0x240>)
 80007b4:	fb82 1203 	smull	r1, r2, r2, r3
 80007b8:	1152      	asrs	r2, r2, #5
 80007ba:	17db      	asrs	r3, r3, #31
 80007bc:	1ad3      	subs	r3, r2, r3
 80007be:	4a46      	ldr	r2, [pc, #280]	; (80008d8 <fsm_manual+0x25c>)
 80007c0:	6013      	str	r3, [r2, #0]
		displaylight(0, 1, 0, 0, 1, 0);
 80007c2:	2300      	movs	r3, #0
 80007c4:	9301      	str	r3, [sp, #4]
 80007c6:	2301      	movs	r3, #1
 80007c8:	9300      	str	r3, [sp, #0]
 80007ca:	2300      	movs	r3, #0
 80007cc:	2200      	movs	r2, #0
 80007ce:	2101      	movs	r1, #1
 80007d0:	2000      	movs	r0, #0
 80007d2:	f000 ffe5 	bl	80017a0 <displaylight>
		if(timer1_flag==1){
 80007d6:	4b3a      	ldr	r3, [pc, #232]	; (80008c0 <fsm_manual+0x244>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d123      	bne.n	8000826 <fsm_manual+0x1aa>
			state=AUTORED_GREEN;
 80007de:	4b34      	ldr	r3, [pc, #208]	; (80008b0 <fsm_manual+0x234>)
 80007e0:	2266      	movs	r2, #102	; 0x66
 80007e2:	601a      	str	r2, [r3, #0]
			setTimer1(GREENTIME);
 80007e4:	4b37      	ldr	r3, [pc, #220]	; (80008c4 <fsm_manual+0x248>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 fe93 	bl	8001514 <setTimer1>
			remaintime1=REDTIME/100;
 80007ee:	4b32      	ldr	r3, [pc, #200]	; (80008b8 <fsm_manual+0x23c>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4a32      	ldr	r2, [pc, #200]	; (80008bc <fsm_manual+0x240>)
 80007f4:	fb82 1203 	smull	r1, r2, r2, r3
 80007f8:	1152      	asrs	r2, r2, #5
 80007fa:	17db      	asrs	r3, r3, #31
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	4a32      	ldr	r2, [pc, #200]	; (80008c8 <fsm_manual+0x24c>)
 8000800:	6013      	str	r3, [r2, #0]
			remaintime2=GREENTIME/100;
 8000802:	4b30      	ldr	r3, [pc, #192]	; (80008c4 <fsm_manual+0x248>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a2d      	ldr	r2, [pc, #180]	; (80008bc <fsm_manual+0x240>)
 8000808:	fb82 1203 	smull	r1, r2, r2, r3
 800080c:	1152      	asrs	r2, r2, #5
 800080e:	17db      	asrs	r3, r3, #31
 8000810:	1ad3      	subs	r3, r2, r3
 8000812:	4a2e      	ldr	r2, [pc, #184]	; (80008cc <fsm_manual+0x250>)
 8000814:	6013      	str	r3, [r2, #0]
			SEGData = remaintime1;
 8000816:	4b2c      	ldr	r3, [pc, #176]	; (80008c8 <fsm_manual+0x24c>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a2d      	ldr	r2, [pc, #180]	; (80008d0 <fsm_manual+0x254>)
 800081c:	6013      	str	r3, [r2, #0]
			LEDData = remaintime2;
 800081e:	4b2b      	ldr	r3, [pc, #172]	; (80008cc <fsm_manual+0x250>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a2c      	ldr	r2, [pc, #176]	; (80008d4 <fsm_manual+0x258>)
 8000824:	6013      	str	r3, [r2, #0]
		if(isButtonPressed(0)==1){
 8000826:	2000      	movs	r0, #0
 8000828:	f7ff fc90 	bl	800014c <isButtonPressed>
 800082c:	4603      	mov	r3, r0
 800082e:	2b01      	cmp	r3, #1
 8000830:	d106      	bne.n	8000840 <fsm_manual+0x1c4>
			state = MANUAL_YELLOW;
 8000832:	4b1f      	ldr	r3, [pc, #124]	; (80008b0 <fsm_manual+0x234>)
 8000834:	220e      	movs	r2, #14
 8000836:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000838:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800083c:	f000 fe6a 	bl	8001514 <setTimer1>
		if(isButtonPressed(1)==1){
 8000840:	2001      	movs	r0, #1
 8000842:	f7ff fc83 	bl	800014c <isButtonPressed>
 8000846:	4603      	mov	r3, r0
 8000848:	2b01      	cmp	r3, #1
 800084a:	d104      	bne.n	8000856 <fsm_manual+0x1da>
			temp_green++;
 800084c:	4b22      	ldr	r3, [pc, #136]	; (80008d8 <fsm_manual+0x25c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	3301      	adds	r3, #1
 8000852:	4a21      	ldr	r2, [pc, #132]	; (80008d8 <fsm_manual+0x25c>)
 8000854:	6013      	str	r3, [r2, #0]
		display_time(temp_green);
 8000856:	4b20      	ldr	r3, [pc, #128]	; (80008d8 <fsm_manual+0x25c>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff fed6 	bl	800060c <display_time>
		if(isButtonPressed(2)==1){
 8000860:	2002      	movs	r0, #2
 8000862:	f7ff fc73 	bl	800014c <isButtonPressed>
 8000866:	4603      	mov	r3, r0
 8000868:	2b01      	cmp	r3, #1
 800086a:	f040 80de 	bne.w	8000a2a <fsm_manual+0x3ae>
            if (temp_red == temp_green + temp_yellow) {
 800086e:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <fsm_manual+0x25c>)
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <fsm_manual+0x260>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	441a      	add	r2, r3
 8000878:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <fsm_manual+0x238>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	429a      	cmp	r2, r3
 800087e:	f040 80d4 	bne.w	8000a2a <fsm_manual+0x3ae>
                REDTIME = temp_red * 100;
 8000882:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <fsm_manual+0x238>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	2264      	movs	r2, #100	; 0x64
 8000888:	fb02 f303 	mul.w	r3, r2, r3
 800088c:	4a0a      	ldr	r2, [pc, #40]	; (80008b8 <fsm_manual+0x23c>)
 800088e:	6013      	str	r3, [r2, #0]
                YELLOWTIME = temp_yellow * 100;
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <fsm_manual+0x260>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2264      	movs	r2, #100	; 0x64
 8000896:	fb02 f303 	mul.w	r3, r2, r3
 800089a:	4a11      	ldr	r2, [pc, #68]	; (80008e0 <fsm_manual+0x264>)
 800089c:	6013      	str	r3, [r2, #0]
                GREENTIME = temp_green * 100;
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <fsm_manual+0x25c>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2264      	movs	r2, #100	; 0x64
 80008a4:	fb02 f303 	mul.w	r3, r2, r3
 80008a8:	4a06      	ldr	r2, [pc, #24]	; (80008c4 <fsm_manual+0x248>)
 80008aa:	6013      	str	r3, [r2, #0]
		break;
 80008ac:	e0bd      	b.n	8000a2a <fsm_manual+0x3ae>
 80008ae:	bf00      	nop
 80008b0:	20000030 	.word	0x20000030
 80008b4:	20000080 	.word	0x20000080
 80008b8:	2000003c 	.word	0x2000003c
 80008bc:	51eb851f 	.word	0x51eb851f
 80008c0:	2000008c 	.word	0x2000008c
 80008c4:	20000034 	.word	0x20000034
 80008c8:	20000070 	.word	0x20000070
 80008cc:	20000074 	.word	0x20000074
 80008d0:	20000068 	.word	0x20000068
 80008d4:	2000006c 	.word	0x2000006c
 80008d8:	20000088 	.word	0x20000088
 80008dc:	20000084 	.word	0x20000084
 80008e0:	20000038 	.word	0x20000038
        if (temp_yellow == 0) {
 80008e4:	4b54      	ldr	r3, [pc, #336]	; (8000a38 <fsm_manual+0x3bc>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d109      	bne.n	8000900 <fsm_manual+0x284>
            temp_yellow = YELLOWTIME / 100;
 80008ec:	4b53      	ldr	r3, [pc, #332]	; (8000a3c <fsm_manual+0x3c0>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a53      	ldr	r2, [pc, #332]	; (8000a40 <fsm_manual+0x3c4>)
 80008f2:	fb82 1203 	smull	r1, r2, r2, r3
 80008f6:	1152      	asrs	r2, r2, #5
 80008f8:	17db      	asrs	r3, r3, #31
 80008fa:	1ad3      	subs	r3, r2, r3
 80008fc:	4a4e      	ldr	r2, [pc, #312]	; (8000a38 <fsm_manual+0x3bc>)
 80008fe:	6013      	str	r3, [r2, #0]
		displaylight(0, 0, 1, 0, 0, 1);
 8000900:	2301      	movs	r3, #1
 8000902:	9301      	str	r3, [sp, #4]
 8000904:	2300      	movs	r3, #0
 8000906:	9300      	str	r3, [sp, #0]
 8000908:	2300      	movs	r3, #0
 800090a:	2201      	movs	r2, #1
 800090c:	2100      	movs	r1, #0
 800090e:	2000      	movs	r0, #0
 8000910:	f000 ff46 	bl	80017a0 <displaylight>
		if(timer1_flag==1){
 8000914:	4b4b      	ldr	r3, [pc, #300]	; (8000a44 <fsm_manual+0x3c8>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2b01      	cmp	r3, #1
 800091a:	d123      	bne.n	8000964 <fsm_manual+0x2e8>
			state=AUTORED_GREEN;
 800091c:	4b4a      	ldr	r3, [pc, #296]	; (8000a48 <fsm_manual+0x3cc>)
 800091e:	2266      	movs	r2, #102	; 0x66
 8000920:	601a      	str	r2, [r3, #0]
			setTimer1(GREENTIME);
 8000922:	4b4a      	ldr	r3, [pc, #296]	; (8000a4c <fsm_manual+0x3d0>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4618      	mov	r0, r3
 8000928:	f000 fdf4 	bl	8001514 <setTimer1>
			remaintime1=REDTIME/100;
 800092c:	4b48      	ldr	r3, [pc, #288]	; (8000a50 <fsm_manual+0x3d4>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a43      	ldr	r2, [pc, #268]	; (8000a40 <fsm_manual+0x3c4>)
 8000932:	fb82 1203 	smull	r1, r2, r2, r3
 8000936:	1152      	asrs	r2, r2, #5
 8000938:	17db      	asrs	r3, r3, #31
 800093a:	1ad3      	subs	r3, r2, r3
 800093c:	4a45      	ldr	r2, [pc, #276]	; (8000a54 <fsm_manual+0x3d8>)
 800093e:	6013      	str	r3, [r2, #0]
			remaintime2=GREENTIME/100;
 8000940:	4b42      	ldr	r3, [pc, #264]	; (8000a4c <fsm_manual+0x3d0>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a3e      	ldr	r2, [pc, #248]	; (8000a40 <fsm_manual+0x3c4>)
 8000946:	fb82 1203 	smull	r1, r2, r2, r3
 800094a:	1152      	asrs	r2, r2, #5
 800094c:	17db      	asrs	r3, r3, #31
 800094e:	1ad3      	subs	r3, r2, r3
 8000950:	4a41      	ldr	r2, [pc, #260]	; (8000a58 <fsm_manual+0x3dc>)
 8000952:	6013      	str	r3, [r2, #0]
			SEGData = remaintime1;
 8000954:	4b3f      	ldr	r3, [pc, #252]	; (8000a54 <fsm_manual+0x3d8>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a40      	ldr	r2, [pc, #256]	; (8000a5c <fsm_manual+0x3e0>)
 800095a:	6013      	str	r3, [r2, #0]
			LEDData = remaintime2;
 800095c:	4b3e      	ldr	r3, [pc, #248]	; (8000a58 <fsm_manual+0x3dc>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a3f      	ldr	r2, [pc, #252]	; (8000a60 <fsm_manual+0x3e4>)
 8000962:	6013      	str	r3, [r2, #0]
		if(isButtonPressed(0)==1){
 8000964:	2000      	movs	r0, #0
 8000966:	f7ff fbf1 	bl	800014c <isButtonPressed>
 800096a:	4603      	mov	r3, r0
 800096c:	2b01      	cmp	r3, #1
 800096e:	d123      	bne.n	80009b8 <fsm_manual+0x33c>
			state = AUTORED_GREEN;
 8000970:	4b35      	ldr	r3, [pc, #212]	; (8000a48 <fsm_manual+0x3cc>)
 8000972:	2266      	movs	r2, #102	; 0x66
 8000974:	601a      	str	r2, [r3, #0]
			setTimer1(GREENTIME);
 8000976:	4b35      	ldr	r3, [pc, #212]	; (8000a4c <fsm_manual+0x3d0>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4618      	mov	r0, r3
 800097c:	f000 fdca 	bl	8001514 <setTimer1>
			remaintime1=REDTIME/100;
 8000980:	4b33      	ldr	r3, [pc, #204]	; (8000a50 <fsm_manual+0x3d4>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a2e      	ldr	r2, [pc, #184]	; (8000a40 <fsm_manual+0x3c4>)
 8000986:	fb82 1203 	smull	r1, r2, r2, r3
 800098a:	1152      	asrs	r2, r2, #5
 800098c:	17db      	asrs	r3, r3, #31
 800098e:	1ad3      	subs	r3, r2, r3
 8000990:	4a30      	ldr	r2, [pc, #192]	; (8000a54 <fsm_manual+0x3d8>)
 8000992:	6013      	str	r3, [r2, #0]
			remaintime2=GREENTIME/100;
 8000994:	4b2d      	ldr	r3, [pc, #180]	; (8000a4c <fsm_manual+0x3d0>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a29      	ldr	r2, [pc, #164]	; (8000a40 <fsm_manual+0x3c4>)
 800099a:	fb82 1203 	smull	r1, r2, r2, r3
 800099e:	1152      	asrs	r2, r2, #5
 80009a0:	17db      	asrs	r3, r3, #31
 80009a2:	1ad3      	subs	r3, r2, r3
 80009a4:	4a2c      	ldr	r2, [pc, #176]	; (8000a58 <fsm_manual+0x3dc>)
 80009a6:	6013      	str	r3, [r2, #0]
			SEGData = remaintime1;
 80009a8:	4b2a      	ldr	r3, [pc, #168]	; (8000a54 <fsm_manual+0x3d8>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a2b      	ldr	r2, [pc, #172]	; (8000a5c <fsm_manual+0x3e0>)
 80009ae:	6013      	str	r3, [r2, #0]
			LEDData = remaintime2;
 80009b0:	4b29      	ldr	r3, [pc, #164]	; (8000a58 <fsm_manual+0x3dc>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a2a      	ldr	r2, [pc, #168]	; (8000a60 <fsm_manual+0x3e4>)
 80009b6:	6013      	str	r3, [r2, #0]
		if(isButtonPressed(1)==1){
 80009b8:	2001      	movs	r0, #1
 80009ba:	f7ff fbc7 	bl	800014c <isButtonPressed>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d104      	bne.n	80009ce <fsm_manual+0x352>
			temp_yellow++;
 80009c4:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <fsm_manual+0x3bc>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	3301      	adds	r3, #1
 80009ca:	4a1b      	ldr	r2, [pc, #108]	; (8000a38 <fsm_manual+0x3bc>)
 80009cc:	6013      	str	r3, [r2, #0]
		display_time(temp_yellow);
 80009ce:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <fsm_manual+0x3bc>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff fe1a 	bl	800060c <display_time>
		if(isButtonPressed(2)==1){
 80009d8:	2002      	movs	r0, #2
 80009da:	f7ff fbb7 	bl	800014c <isButtonPressed>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d124      	bne.n	8000a2e <fsm_manual+0x3b2>
            if (temp_red == temp_green + temp_yellow) {
 80009e4:	4b1f      	ldr	r3, [pc, #124]	; (8000a64 <fsm_manual+0x3e8>)
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <fsm_manual+0x3bc>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	441a      	add	r2, r3
 80009ee:	4b1e      	ldr	r3, [pc, #120]	; (8000a68 <fsm_manual+0x3ec>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	429a      	cmp	r2, r3
 80009f4:	d11b      	bne.n	8000a2e <fsm_manual+0x3b2>
                REDTIME = temp_red * 100;
 80009f6:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <fsm_manual+0x3ec>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	2264      	movs	r2, #100	; 0x64
 80009fc:	fb02 f303 	mul.w	r3, r2, r3
 8000a00:	4a13      	ldr	r2, [pc, #76]	; (8000a50 <fsm_manual+0x3d4>)
 8000a02:	6013      	str	r3, [r2, #0]
                YELLOWTIME = temp_yellow * 100;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <fsm_manual+0x3bc>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2264      	movs	r2, #100	; 0x64
 8000a0a:	fb02 f303 	mul.w	r3, r2, r3
 8000a0e:	4a0b      	ldr	r2, [pc, #44]	; (8000a3c <fsm_manual+0x3c0>)
 8000a10:	6013      	str	r3, [r2, #0]
                GREENTIME = temp_green * 100;
 8000a12:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <fsm_manual+0x3e8>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	2264      	movs	r2, #100	; 0x64
 8000a18:	fb02 f303 	mul.w	r3, r2, r3
 8000a1c:	4a0b      	ldr	r2, [pc, #44]	; (8000a4c <fsm_manual+0x3d0>)
 8000a1e:	6013      	str	r3, [r2, #0]
		break;
 8000a20:	e005      	b.n	8000a2e <fsm_manual+0x3b2>
		break;
 8000a22:	bf00      	nop
 8000a24:	e004      	b.n	8000a30 <fsm_manual+0x3b4>
		break;
 8000a26:	bf00      	nop
 8000a28:	e002      	b.n	8000a30 <fsm_manual+0x3b4>
		break;
 8000a2a:	bf00      	nop
 8000a2c:	e000      	b.n	8000a30 <fsm_manual+0x3b4>
		break;
 8000a2e:	bf00      	nop
	}


}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000084 	.word	0x20000084
 8000a3c:	20000038 	.word	0x20000038
 8000a40:	51eb851f 	.word	0x51eb851f
 8000a44:	2000008c 	.word	0x2000008c
 8000a48:	20000030 	.word	0x20000030
 8000a4c:	20000034 	.word	0x20000034
 8000a50:	2000003c 	.word	0x2000003c
 8000a54:	20000070 	.word	0x20000070
 8000a58:	20000074 	.word	0x20000074
 8000a5c:	20000068 	.word	0x20000068
 8000a60:	2000006c 	.word	0x2000006c
 8000a64:	20000088 	.word	0x20000088
 8000a68:	20000080 	.word	0x20000080

08000a6c <display_SEG>:
 */
#include "led7_segment.h"

int LEDData;
int SEGData;
void display_SEG(int num){
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2b09      	cmp	r3, #9
 8000a78:	f200 81c8 	bhi.w	8000e0c <display_SEG+0x3a0>
 8000a7c:	a201      	add	r2, pc, #4	; (adr r2, 8000a84 <display_SEG+0x18>)
 8000a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a82:	bf00      	nop
 8000a84:	08000aad 	.word	0x08000aad
 8000a88:	08000b03 	.word	0x08000b03
 8000a8c:	08000b59 	.word	0x08000b59
 8000a90:	08000baf 	.word	0x08000baf
 8000a94:	08000c05 	.word	0x08000c05
 8000a98:	08000c5b 	.word	0x08000c5b
 8000a9c:	08000cb1 	.word	0x08000cb1
 8000aa0:	08000d07 	.word	0x08000d07
 8000aa4:	08000d5d 	.word	0x08000d5d
 8000aa8:	08000db3 	.word	0x08000db3
	switch (num) {
		case 0:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, 0);
 8000aac:	2200      	movs	r2, #0
 8000aae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ab2:	48d5      	ldr	r0, [pc, #852]	; (8000e08 <display_SEG+0x39c>)
 8000ab4:	f001 f9d3 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, 0);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000abe:	48d2      	ldr	r0, [pc, #840]	; (8000e08 <display_SEG+0x39c>)
 8000ac0:	f001 f9cd 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, 0);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aca:	48cf      	ldr	r0, [pc, #828]	; (8000e08 <display_SEG+0x39c>)
 8000acc:	f001 f9c7 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, 0);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ad6:	48cc      	ldr	r0, [pc, #816]	; (8000e08 <display_SEG+0x39c>)
 8000ad8:	f001 f9c1 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, 0);
 8000adc:	2200      	movs	r2, #0
 8000ade:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ae2:	48c9      	ldr	r0, [pc, #804]	; (8000e08 <display_SEG+0x39c>)
 8000ae4:	f001 f9bb 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, 0);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aee:	48c6      	ldr	r0, [pc, #792]	; (8000e08 <display_SEG+0x39c>)
 8000af0:	f001 f9b5 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, 1);
 8000af4:	2201      	movs	r2, #1
 8000af6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000afa:	48c3      	ldr	r0, [pc, #780]	; (8000e08 <display_SEG+0x39c>)
 8000afc:	f001 f9af 	bl	8001e5e <HAL_GPIO_WritePin>
			break;
 8000b00:	e185      	b.n	8000e0e <display_SEG+0x3a2>
		case 1:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, 1);
 8000b02:	2201      	movs	r2, #1
 8000b04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b08:	48bf      	ldr	r0, [pc, #764]	; (8000e08 <display_SEG+0x39c>)
 8000b0a:	f001 f9a8 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, 0);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b14:	48bc      	ldr	r0, [pc, #752]	; (8000e08 <display_SEG+0x39c>)
 8000b16:	f001 f9a2 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b20:	48b9      	ldr	r0, [pc, #740]	; (8000e08 <display_SEG+0x39c>)
 8000b22:	f001 f99c 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, 1);
 8000b26:	2201      	movs	r2, #1
 8000b28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b2c:	48b6      	ldr	r0, [pc, #728]	; (8000e08 <display_SEG+0x39c>)
 8000b2e:	f001 f996 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, 1);
 8000b32:	2201      	movs	r2, #1
 8000b34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b38:	48b3      	ldr	r0, [pc, #716]	; (8000e08 <display_SEG+0x39c>)
 8000b3a:	f001 f990 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, 1);
 8000b3e:	2201      	movs	r2, #1
 8000b40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b44:	48b0      	ldr	r0, [pc, #704]	; (8000e08 <display_SEG+0x39c>)
 8000b46:	f001 f98a 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, 1);
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b50:	48ad      	ldr	r0, [pc, #692]	; (8000e08 <display_SEG+0x39c>)
 8000b52:	f001 f984 	bl	8001e5e <HAL_GPIO_WritePin>
			break;
 8000b56:	e15a      	b.n	8000e0e <display_SEG+0x3a2>
		case 2:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, 0);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b5e:	48aa      	ldr	r0, [pc, #680]	; (8000e08 <display_SEG+0x39c>)
 8000b60:	f001 f97d 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, 0);
 8000b64:	2200      	movs	r2, #0
 8000b66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b6a:	48a7      	ldr	r0, [pc, #668]	; (8000e08 <display_SEG+0x39c>)
 8000b6c:	f001 f977 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, 1);
 8000b70:	2201      	movs	r2, #1
 8000b72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b76:	48a4      	ldr	r0, [pc, #656]	; (8000e08 <display_SEG+0x39c>)
 8000b78:	f001 f971 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, 0);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b82:	48a1      	ldr	r0, [pc, #644]	; (8000e08 <display_SEG+0x39c>)
 8000b84:	f001 f96b 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, 0);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b8e:	489e      	ldr	r0, [pc, #632]	; (8000e08 <display_SEG+0x39c>)
 8000b90:	f001 f965 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, 1);
 8000b94:	2201      	movs	r2, #1
 8000b96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b9a:	489b      	ldr	r0, [pc, #620]	; (8000e08 <display_SEG+0x39c>)
 8000b9c:	f001 f95f 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, 0);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ba6:	4898      	ldr	r0, [pc, #608]	; (8000e08 <display_SEG+0x39c>)
 8000ba8:	f001 f959 	bl	8001e5e <HAL_GPIO_WritePin>
			break;
 8000bac:	e12f      	b.n	8000e0e <display_SEG+0x3a2>
		case 3:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bb4:	4894      	ldr	r0, [pc, #592]	; (8000e08 <display_SEG+0x39c>)
 8000bb6:	f001 f952 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, 0);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bc0:	4891      	ldr	r0, [pc, #580]	; (8000e08 <display_SEG+0x39c>)
 8000bc2:	f001 f94c 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, 0);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bcc:	488e      	ldr	r0, [pc, #568]	; (8000e08 <display_SEG+0x39c>)
 8000bce:	f001 f946 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, 0);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bd8:	488b      	ldr	r0, [pc, #556]	; (8000e08 <display_SEG+0x39c>)
 8000bda:	f001 f940 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, 1);
 8000bde:	2201      	movs	r2, #1
 8000be0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000be4:	4888      	ldr	r0, [pc, #544]	; (8000e08 <display_SEG+0x39c>)
 8000be6:	f001 f93a 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, 1);
 8000bea:	2201      	movs	r2, #1
 8000bec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bf0:	4885      	ldr	r0, [pc, #532]	; (8000e08 <display_SEG+0x39c>)
 8000bf2:	f001 f934 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bfc:	4882      	ldr	r0, [pc, #520]	; (8000e08 <display_SEG+0x39c>)
 8000bfe:	f001 f92e 	bl	8001e5e <HAL_GPIO_WritePin>
			break;
 8000c02:	e104      	b.n	8000e0e <display_SEG+0x3a2>
		case 4:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, 1);
 8000c04:	2201      	movs	r2, #1
 8000c06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c0a:	487f      	ldr	r0, [pc, #508]	; (8000e08 <display_SEG+0x39c>)
 8000c0c:	f001 f927 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, 0);
 8000c10:	2200      	movs	r2, #0
 8000c12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c16:	487c      	ldr	r0, [pc, #496]	; (8000e08 <display_SEG+0x39c>)
 8000c18:	f001 f921 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, 0);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c22:	4879      	ldr	r0, [pc, #484]	; (8000e08 <display_SEG+0x39c>)
 8000c24:	f001 f91b 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, 1);
 8000c28:	2201      	movs	r2, #1
 8000c2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c2e:	4876      	ldr	r0, [pc, #472]	; (8000e08 <display_SEG+0x39c>)
 8000c30:	f001 f915 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, 1);
 8000c34:	2201      	movs	r2, #1
 8000c36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c3a:	4873      	ldr	r0, [pc, #460]	; (8000e08 <display_SEG+0x39c>)
 8000c3c:	f001 f90f 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, 0);
 8000c40:	2200      	movs	r2, #0
 8000c42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c46:	4870      	ldr	r0, [pc, #448]	; (8000e08 <display_SEG+0x39c>)
 8000c48:	f001 f909 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, 0);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c52:	486d      	ldr	r0, [pc, #436]	; (8000e08 <display_SEG+0x39c>)
 8000c54:	f001 f903 	bl	8001e5e <HAL_GPIO_WritePin>
			break;
 8000c58:	e0d9      	b.n	8000e0e <display_SEG+0x3a2>
		case 5:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c60:	4869      	ldr	r0, [pc, #420]	; (8000e08 <display_SEG+0x39c>)
 8000c62:	f001 f8fc 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, 1);
 8000c66:	2201      	movs	r2, #1
 8000c68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c6c:	4866      	ldr	r0, [pc, #408]	; (8000e08 <display_SEG+0x39c>)
 8000c6e:	f001 f8f6 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c78:	4863      	ldr	r0, [pc, #396]	; (8000e08 <display_SEG+0x39c>)
 8000c7a:	f001 f8f0 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, 0);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c84:	4860      	ldr	r0, [pc, #384]	; (8000e08 <display_SEG+0x39c>)
 8000c86:	f001 f8ea 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, 1);
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c90:	485d      	ldr	r0, [pc, #372]	; (8000e08 <display_SEG+0x39c>)
 8000c92:	f001 f8e4 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, 0);
 8000c96:	2200      	movs	r2, #0
 8000c98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c9c:	485a      	ldr	r0, [pc, #360]	; (8000e08 <display_SEG+0x39c>)
 8000c9e:	f001 f8de 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, 0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ca8:	4857      	ldr	r0, [pc, #348]	; (8000e08 <display_SEG+0x39c>)
 8000caa:	f001 f8d8 	bl	8001e5e <HAL_GPIO_WritePin>
			break;
 8000cae:	e0ae      	b.n	8000e0e <display_SEG+0x3a2>
		case 6:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, 0);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cb6:	4854      	ldr	r0, [pc, #336]	; (8000e08 <display_SEG+0x39c>)
 8000cb8:	f001 f8d1 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, 1);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cc2:	4851      	ldr	r0, [pc, #324]	; (8000e08 <display_SEG+0x39c>)
 8000cc4:	f001 f8cb 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, 0);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cce:	484e      	ldr	r0, [pc, #312]	; (8000e08 <display_SEG+0x39c>)
 8000cd0:	f001 f8c5 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, 0);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cda:	484b      	ldr	r0, [pc, #300]	; (8000e08 <display_SEG+0x39c>)
 8000cdc:	f001 f8bf 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, 0);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ce6:	4848      	ldr	r0, [pc, #288]	; (8000e08 <display_SEG+0x39c>)
 8000ce8:	f001 f8b9 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, 0);
 8000cec:	2200      	movs	r2, #0
 8000cee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cf2:	4845      	ldr	r0, [pc, #276]	; (8000e08 <display_SEG+0x39c>)
 8000cf4:	f001 f8b3 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, 0);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cfe:	4842      	ldr	r0, [pc, #264]	; (8000e08 <display_SEG+0x39c>)
 8000d00:	f001 f8ad 	bl	8001e5e <HAL_GPIO_WritePin>
			break;
 8000d04:	e083      	b.n	8000e0e <display_SEG+0x3a2>
		case 7:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, 0);
 8000d06:	2200      	movs	r2, #0
 8000d08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d0c:	483e      	ldr	r0, [pc, #248]	; (8000e08 <display_SEG+0x39c>)
 8000d0e:	f001 f8a6 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d18:	483b      	ldr	r0, [pc, #236]	; (8000e08 <display_SEG+0x39c>)
 8000d1a:	f001 f8a0 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, 0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d24:	4838      	ldr	r0, [pc, #224]	; (8000e08 <display_SEG+0x39c>)
 8000d26:	f001 f89a 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, 1);
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d30:	4835      	ldr	r0, [pc, #212]	; (8000e08 <display_SEG+0x39c>)
 8000d32:	f001 f894 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, 1);
 8000d36:	2201      	movs	r2, #1
 8000d38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d3c:	4832      	ldr	r0, [pc, #200]	; (8000e08 <display_SEG+0x39c>)
 8000d3e:	f001 f88e 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, 1);
 8000d42:	2201      	movs	r2, #1
 8000d44:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d48:	482f      	ldr	r0, [pc, #188]	; (8000e08 <display_SEG+0x39c>)
 8000d4a:	f001 f888 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, 1);
 8000d4e:	2201      	movs	r2, #1
 8000d50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d54:	482c      	ldr	r0, [pc, #176]	; (8000e08 <display_SEG+0x39c>)
 8000d56:	f001 f882 	bl	8001e5e <HAL_GPIO_WritePin>
			break;
 8000d5a:	e058      	b.n	8000e0e <display_SEG+0x3a2>
		case 8:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d62:	4829      	ldr	r0, [pc, #164]	; (8000e08 <display_SEG+0x39c>)
 8000d64:	f001 f87b 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, 0);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d6e:	4826      	ldr	r0, [pc, #152]	; (8000e08 <display_SEG+0x39c>)
 8000d70:	f001 f875 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, 0);
 8000d74:	2200      	movs	r2, #0
 8000d76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d7a:	4823      	ldr	r0, [pc, #140]	; (8000e08 <display_SEG+0x39c>)
 8000d7c:	f001 f86f 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, 0);
 8000d80:	2200      	movs	r2, #0
 8000d82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d86:	4820      	ldr	r0, [pc, #128]	; (8000e08 <display_SEG+0x39c>)
 8000d88:	f001 f869 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, 0);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d92:	481d      	ldr	r0, [pc, #116]	; (8000e08 <display_SEG+0x39c>)
 8000d94:	f001 f863 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, 0);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d9e:	481a      	ldr	r0, [pc, #104]	; (8000e08 <display_SEG+0x39c>)
 8000da0:	f001 f85d 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, 0);
 8000da4:	2200      	movs	r2, #0
 8000da6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000daa:	4817      	ldr	r0, [pc, #92]	; (8000e08 <display_SEG+0x39c>)
 8000dac:	f001 f857 	bl	8001e5e <HAL_GPIO_WritePin>
			break;
 8000db0:	e02d      	b.n	8000e0e <display_SEG+0x3a2>
		case 9:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, 0);
 8000db2:	2200      	movs	r2, #0
 8000db4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000db8:	4813      	ldr	r0, [pc, #76]	; (8000e08 <display_SEG+0x39c>)
 8000dba:	f001 f850 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, 0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dc4:	4810      	ldr	r0, [pc, #64]	; (8000e08 <display_SEG+0x39c>)
 8000dc6:	f001 f84a 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, 0);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dd0:	480d      	ldr	r0, [pc, #52]	; (8000e08 <display_SEG+0x39c>)
 8000dd2:	f001 f844 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, 0);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ddc:	480a      	ldr	r0, [pc, #40]	; (8000e08 <display_SEG+0x39c>)
 8000dde:	f001 f83e 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, 1);
 8000de2:	2201      	movs	r2, #1
 8000de4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000de8:	4807      	ldr	r0, [pc, #28]	; (8000e08 <display_SEG+0x39c>)
 8000dea:	f001 f838 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, 0);
 8000dee:	2200      	movs	r2, #0
 8000df0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000df4:	4804      	ldr	r0, [pc, #16]	; (8000e08 <display_SEG+0x39c>)
 8000df6:	f001 f832 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, 0);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e00:	4801      	ldr	r0, [pc, #4]	; (8000e08 <display_SEG+0x39c>)
 8000e02:	f001 f82c 	bl	8001e5e <HAL_GPIO_WritePin>
			break;
 8000e06:	e002      	b.n	8000e0e <display_SEG+0x3a2>
 8000e08:	40010800 	.word	0x40010800
		default:
			break;
 8000e0c:	bf00      	nop
	}
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop

08000e18 <display_LED>:
void display_LED(int num){
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2b09      	cmp	r3, #9
 8000e24:	f200 8194 	bhi.w	8001150 <display_LED+0x338>
 8000e28:	a201      	add	r2, pc, #4	; (adr r2, 8000e30 <display_LED+0x18>)
 8000e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e2e:	bf00      	nop
 8000e30:	08000e59 	.word	0x08000e59
 8000e34:	08000ea5 	.word	0x08000ea5
 8000e38:	08000ef1 	.word	0x08000ef1
 8000e3c:	08000f3d 	.word	0x08000f3d
 8000e40:	08000f89 	.word	0x08000f89
 8000e44:	08000fd5 	.word	0x08000fd5
 8000e48:	08001021 	.word	0x08001021
 8000e4c:	0800106d 	.word	0x0800106d
 8000e50:	080010b9 	.word	0x080010b9
 8000e54:	08001105 	.word	0x08001105
	switch (num) {
		case 0:
			HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, 0);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2108      	movs	r1, #8
 8000e5c:	48bf      	ldr	r0, [pc, #764]	; (800115c <display_LED+0x344>)
 8000e5e:	f000 fffe 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2110      	movs	r1, #16
 8000e66:	48bd      	ldr	r0, [pc, #756]	; (800115c <display_LED+0x344>)
 8000e68:	f000 fff9 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 0);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2120      	movs	r1, #32
 8000e70:	48ba      	ldr	r0, [pc, #744]	; (800115c <display_LED+0x344>)
 8000e72:	f000 fff4 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 0);
 8000e76:	2200      	movs	r2, #0
 8000e78:	2140      	movs	r1, #64	; 0x40
 8000e7a:	48b8      	ldr	r0, [pc, #736]	; (800115c <display_LED+0x344>)
 8000e7c:	f000 ffef 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 0);
 8000e80:	2200      	movs	r2, #0
 8000e82:	2180      	movs	r1, #128	; 0x80
 8000e84:	48b5      	ldr	r0, [pc, #724]	; (800115c <display_LED+0x344>)
 8000e86:	f000 ffea 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, 0);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e90:	48b2      	ldr	r0, [pc, #712]	; (800115c <display_LED+0x344>)
 8000e92:	f000 ffe4 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, 1);
 8000e96:	2201      	movs	r2, #1
 8000e98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e9c:	48af      	ldr	r0, [pc, #700]	; (800115c <display_LED+0x344>)
 8000e9e:	f000 ffde 	bl	8001e5e <HAL_GPIO_WritePin>
			break;
 8000ea2:	e156      	b.n	8001152 <display_LED+0x33a>
		case 1:
			HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, 1);
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	2108      	movs	r1, #8
 8000ea8:	48ac      	ldr	r0, [pc, #688]	; (800115c <display_LED+0x344>)
 8000eaa:	f000 ffd8 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2110      	movs	r1, #16
 8000eb2:	48aa      	ldr	r0, [pc, #680]	; (800115c <display_LED+0x344>)
 8000eb4:	f000 ffd3 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 0);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2120      	movs	r1, #32
 8000ebc:	48a7      	ldr	r0, [pc, #668]	; (800115c <display_LED+0x344>)
 8000ebe:	f000 ffce 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 1);
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	2140      	movs	r1, #64	; 0x40
 8000ec6:	48a5      	ldr	r0, [pc, #660]	; (800115c <display_LED+0x344>)
 8000ec8:	f000 ffc9 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 1);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	2180      	movs	r1, #128	; 0x80
 8000ed0:	48a2      	ldr	r0, [pc, #648]	; (800115c <display_LED+0x344>)
 8000ed2:	f000 ffc4 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, 1);
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000edc:	489f      	ldr	r0, [pc, #636]	; (800115c <display_LED+0x344>)
 8000ede:	f000 ffbe 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, 1);
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ee8:	489c      	ldr	r0, [pc, #624]	; (800115c <display_LED+0x344>)
 8000eea:	f000 ffb8 	bl	8001e5e <HAL_GPIO_WritePin>
			break;
 8000eee:	e130      	b.n	8001152 <display_LED+0x33a>
		case 2:
			HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, 0);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2108      	movs	r1, #8
 8000ef4:	4899      	ldr	r0, [pc, #612]	; (800115c <display_LED+0x344>)
 8000ef6:	f000 ffb2 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2110      	movs	r1, #16
 8000efe:	4897      	ldr	r0, [pc, #604]	; (800115c <display_LED+0x344>)
 8000f00:	f000 ffad 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 1);
 8000f04:	2201      	movs	r2, #1
 8000f06:	2120      	movs	r1, #32
 8000f08:	4894      	ldr	r0, [pc, #592]	; (800115c <display_LED+0x344>)
 8000f0a:	f000 ffa8 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 0);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2140      	movs	r1, #64	; 0x40
 8000f12:	4892      	ldr	r0, [pc, #584]	; (800115c <display_LED+0x344>)
 8000f14:	f000 ffa3 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 0);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2180      	movs	r1, #128	; 0x80
 8000f1c:	488f      	ldr	r0, [pc, #572]	; (800115c <display_LED+0x344>)
 8000f1e:	f000 ff9e 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, 1);
 8000f22:	2201      	movs	r2, #1
 8000f24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f28:	488c      	ldr	r0, [pc, #560]	; (800115c <display_LED+0x344>)
 8000f2a:	f000 ff98 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f34:	4889      	ldr	r0, [pc, #548]	; (800115c <display_LED+0x344>)
 8000f36:	f000 ff92 	bl	8001e5e <HAL_GPIO_WritePin>
			break;
 8000f3a:	e10a      	b.n	8001152 <display_LED+0x33a>
		case 3:
			HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, 0);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2108      	movs	r1, #8
 8000f40:	4886      	ldr	r0, [pc, #536]	; (800115c <display_LED+0x344>)
 8000f42:	f000 ff8c 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2110      	movs	r1, #16
 8000f4a:	4884      	ldr	r0, [pc, #528]	; (800115c <display_LED+0x344>)
 8000f4c:	f000 ff87 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 0);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2120      	movs	r1, #32
 8000f54:	4881      	ldr	r0, [pc, #516]	; (800115c <display_LED+0x344>)
 8000f56:	f000 ff82 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2140      	movs	r1, #64	; 0x40
 8000f5e:	487f      	ldr	r0, [pc, #508]	; (800115c <display_LED+0x344>)
 8000f60:	f000 ff7d 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 1);
 8000f64:	2201      	movs	r2, #1
 8000f66:	2180      	movs	r1, #128	; 0x80
 8000f68:	487c      	ldr	r0, [pc, #496]	; (800115c <display_LED+0x344>)
 8000f6a:	f000 ff78 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, 1);
 8000f6e:	2201      	movs	r2, #1
 8000f70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f74:	4879      	ldr	r0, [pc, #484]	; (800115c <display_LED+0x344>)
 8000f76:	f000 ff72 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f80:	4876      	ldr	r0, [pc, #472]	; (800115c <display_LED+0x344>)
 8000f82:	f000 ff6c 	bl	8001e5e <HAL_GPIO_WritePin>
			break;
 8000f86:	e0e4      	b.n	8001152 <display_LED+0x33a>
		case 4:
			HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, 1);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	2108      	movs	r1, #8
 8000f8c:	4873      	ldr	r0, [pc, #460]	; (800115c <display_LED+0x344>)
 8000f8e:	f000 ff66 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2110      	movs	r1, #16
 8000f96:	4871      	ldr	r0, [pc, #452]	; (800115c <display_LED+0x344>)
 8000f98:	f000 ff61 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 0);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2120      	movs	r1, #32
 8000fa0:	486e      	ldr	r0, [pc, #440]	; (800115c <display_LED+0x344>)
 8000fa2:	f000 ff5c 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 1);
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	2140      	movs	r1, #64	; 0x40
 8000faa:	486c      	ldr	r0, [pc, #432]	; (800115c <display_LED+0x344>)
 8000fac:	f000 ff57 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 1);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	2180      	movs	r1, #128	; 0x80
 8000fb4:	4869      	ldr	r0, [pc, #420]	; (800115c <display_LED+0x344>)
 8000fb6:	f000 ff52 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fc0:	4866      	ldr	r0, [pc, #408]	; (800115c <display_LED+0x344>)
 8000fc2:	f000 ff4c 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, 0);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fcc:	4863      	ldr	r0, [pc, #396]	; (800115c <display_LED+0x344>)
 8000fce:	f000 ff46 	bl	8001e5e <HAL_GPIO_WritePin>
			break;
 8000fd2:	e0be      	b.n	8001152 <display_LED+0x33a>
		case 5:
			HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, 0);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2108      	movs	r1, #8
 8000fd8:	4860      	ldr	r0, [pc, #384]	; (800115c <display_LED+0x344>)
 8000fda:	f000 ff40 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 1);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	2110      	movs	r1, #16
 8000fe2:	485e      	ldr	r0, [pc, #376]	; (800115c <display_LED+0x344>)
 8000fe4:	f000 ff3b 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 0);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2120      	movs	r1, #32
 8000fec:	485b      	ldr	r0, [pc, #364]	; (800115c <display_LED+0x344>)
 8000fee:	f000 ff36 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 0);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2140      	movs	r1, #64	; 0x40
 8000ff6:	4859      	ldr	r0, [pc, #356]	; (800115c <display_LED+0x344>)
 8000ff8:	f000 ff31 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 1);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	2180      	movs	r1, #128	; 0x80
 8001000:	4856      	ldr	r0, [pc, #344]	; (800115c <display_LED+0x344>)
 8001002:	f000 ff2c 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, 0);
 8001006:	2200      	movs	r2, #0
 8001008:	f44f 7180 	mov.w	r1, #256	; 0x100
 800100c:	4853      	ldr	r0, [pc, #332]	; (800115c <display_LED+0x344>)
 800100e:	f000 ff26 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, 0);
 8001012:	2200      	movs	r2, #0
 8001014:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001018:	4850      	ldr	r0, [pc, #320]	; (800115c <display_LED+0x344>)
 800101a:	f000 ff20 	bl	8001e5e <HAL_GPIO_WritePin>
			break;
 800101e:	e098      	b.n	8001152 <display_LED+0x33a>
		case 6:
			HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, 0);
 8001020:	2200      	movs	r2, #0
 8001022:	2108      	movs	r1, #8
 8001024:	484d      	ldr	r0, [pc, #308]	; (800115c <display_LED+0x344>)
 8001026:	f000 ff1a 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 1);
 800102a:	2201      	movs	r2, #1
 800102c:	2110      	movs	r1, #16
 800102e:	484b      	ldr	r0, [pc, #300]	; (800115c <display_LED+0x344>)
 8001030:	f000 ff15 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 0);
 8001034:	2200      	movs	r2, #0
 8001036:	2120      	movs	r1, #32
 8001038:	4848      	ldr	r0, [pc, #288]	; (800115c <display_LED+0x344>)
 800103a:	f000 ff10 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 0);
 800103e:	2200      	movs	r2, #0
 8001040:	2140      	movs	r1, #64	; 0x40
 8001042:	4846      	ldr	r0, [pc, #280]	; (800115c <display_LED+0x344>)
 8001044:	f000 ff0b 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 0);
 8001048:	2200      	movs	r2, #0
 800104a:	2180      	movs	r1, #128	; 0x80
 800104c:	4843      	ldr	r0, [pc, #268]	; (800115c <display_LED+0x344>)
 800104e:	f000 ff06 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, 0);
 8001052:	2200      	movs	r2, #0
 8001054:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001058:	4840      	ldr	r0, [pc, #256]	; (800115c <display_LED+0x344>)
 800105a:	f000 ff00 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001064:	483d      	ldr	r0, [pc, #244]	; (800115c <display_LED+0x344>)
 8001066:	f000 fefa 	bl	8001e5e <HAL_GPIO_WritePin>
			break;
 800106a:	e072      	b.n	8001152 <display_LED+0x33a>
		case 7:
			HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, 0);
 800106c:	2200      	movs	r2, #0
 800106e:	2108      	movs	r1, #8
 8001070:	483a      	ldr	r0, [pc, #232]	; (800115c <display_LED+0x344>)
 8001072:	f000 fef4 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2110      	movs	r1, #16
 800107a:	4838      	ldr	r0, [pc, #224]	; (800115c <display_LED+0x344>)
 800107c:	f000 feef 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 0);
 8001080:	2200      	movs	r2, #0
 8001082:	2120      	movs	r1, #32
 8001084:	4835      	ldr	r0, [pc, #212]	; (800115c <display_LED+0x344>)
 8001086:	f000 feea 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 1);
 800108a:	2201      	movs	r2, #1
 800108c:	2140      	movs	r1, #64	; 0x40
 800108e:	4833      	ldr	r0, [pc, #204]	; (800115c <display_LED+0x344>)
 8001090:	f000 fee5 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 1);
 8001094:	2201      	movs	r2, #1
 8001096:	2180      	movs	r1, #128	; 0x80
 8001098:	4830      	ldr	r0, [pc, #192]	; (800115c <display_LED+0x344>)
 800109a:	f000 fee0 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, 1);
 800109e:	2201      	movs	r2, #1
 80010a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010a4:	482d      	ldr	r0, [pc, #180]	; (800115c <display_LED+0x344>)
 80010a6:	f000 feda 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, 1);
 80010aa:	2201      	movs	r2, #1
 80010ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010b0:	482a      	ldr	r0, [pc, #168]	; (800115c <display_LED+0x344>)
 80010b2:	f000 fed4 	bl	8001e5e <HAL_GPIO_WritePin>
			break;
 80010b6:	e04c      	b.n	8001152 <display_LED+0x33a>
		case 8:
			HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, 0);
 80010b8:	2200      	movs	r2, #0
 80010ba:	2108      	movs	r1, #8
 80010bc:	4827      	ldr	r0, [pc, #156]	; (800115c <display_LED+0x344>)
 80010be:	f000 fece 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 0);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2110      	movs	r1, #16
 80010c6:	4825      	ldr	r0, [pc, #148]	; (800115c <display_LED+0x344>)
 80010c8:	f000 fec9 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 0);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2120      	movs	r1, #32
 80010d0:	4822      	ldr	r0, [pc, #136]	; (800115c <display_LED+0x344>)
 80010d2:	f000 fec4 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2140      	movs	r1, #64	; 0x40
 80010da:	4820      	ldr	r0, [pc, #128]	; (800115c <display_LED+0x344>)
 80010dc:	f000 febf 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 0);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2180      	movs	r1, #128	; 0x80
 80010e4:	481d      	ldr	r0, [pc, #116]	; (800115c <display_LED+0x344>)
 80010e6:	f000 feba 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010f0:	481a      	ldr	r0, [pc, #104]	; (800115c <display_LED+0x344>)
 80010f2:	f000 feb4 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010fc:	4817      	ldr	r0, [pc, #92]	; (800115c <display_LED+0x344>)
 80010fe:	f000 feae 	bl	8001e5e <HAL_GPIO_WritePin>
			break;
 8001102:	e026      	b.n	8001152 <display_LED+0x33a>
		case 9:
			HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, 0);
 8001104:	2200      	movs	r2, #0
 8001106:	2108      	movs	r1, #8
 8001108:	4814      	ldr	r0, [pc, #80]	; (800115c <display_LED+0x344>)
 800110a:	f000 fea8 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 0);
 800110e:	2200      	movs	r2, #0
 8001110:	2110      	movs	r1, #16
 8001112:	4812      	ldr	r0, [pc, #72]	; (800115c <display_LED+0x344>)
 8001114:	f000 fea3 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 0);
 8001118:	2200      	movs	r2, #0
 800111a:	2120      	movs	r1, #32
 800111c:	480f      	ldr	r0, [pc, #60]	; (800115c <display_LED+0x344>)
 800111e:	f000 fe9e 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 0);
 8001122:	2200      	movs	r2, #0
 8001124:	2140      	movs	r1, #64	; 0x40
 8001126:	480d      	ldr	r0, [pc, #52]	; (800115c <display_LED+0x344>)
 8001128:	f000 fe99 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 1);
 800112c:	2201      	movs	r2, #1
 800112e:	2180      	movs	r1, #128	; 0x80
 8001130:	480a      	ldr	r0, [pc, #40]	; (800115c <display_LED+0x344>)
 8001132:	f000 fe94 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	f44f 7180 	mov.w	r1, #256	; 0x100
 800113c:	4807      	ldr	r0, [pc, #28]	; (800115c <display_LED+0x344>)
 800113e:	f000 fe8e 	bl	8001e5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, 0);
 8001142:	2200      	movs	r2, #0
 8001144:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001148:	4804      	ldr	r0, [pc, #16]	; (800115c <display_LED+0x344>)
 800114a:	f000 fe88 	bl	8001e5e <HAL_GPIO_WritePin>
			break;
 800114e:	e000      	b.n	8001152 <display_LED+0x33a>
		default:
			break;
 8001150:	bf00      	nop
	}
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40010c00 	.word	0x40010c00

08001160 <update7SEG>:
void update7SEG(int index, int data) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
	switch (index) {
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d003      	beq.n	8001178 <update7SEG+0x18>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d017      	beq.n	80011a6 <update7SEG+0x46>
		HAL_GPIO_WritePin(EN_SEG_0_GPIO_Port, EN_SEG_0_Pin, SET);
		HAL_GPIO_WritePin(EN_SEG_1_GPIO_Port, EN_SEG_1_Pin, RESET);
		display_SEG(data % 10);
		break;
	default:
		break;
 8001176:	e032      	b.n	80011de <update7SEG+0x7e>
		HAL_GPIO_WritePin(EN_SEG_0_GPIO_Port, EN_SEG_0_Pin, RESET);
 8001178:	2200      	movs	r2, #0
 800117a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800117e:	481a      	ldr	r0, [pc, #104]	; (80011e8 <update7SEG+0x88>)
 8001180:	f000 fe6d 	bl	8001e5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_SEG_1_GPIO_Port, EN_SEG_1_Pin, SET);
 8001184:	2201      	movs	r2, #1
 8001186:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800118a:	4817      	ldr	r0, [pc, #92]	; (80011e8 <update7SEG+0x88>)
 800118c:	f000 fe67 	bl	8001e5e <HAL_GPIO_WritePin>
		display_SEG(data / 10);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	4a16      	ldr	r2, [pc, #88]	; (80011ec <update7SEG+0x8c>)
 8001194:	fb82 1203 	smull	r1, r2, r2, r3
 8001198:	1092      	asrs	r2, r2, #2
 800119a:	17db      	asrs	r3, r3, #31
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff fc64 	bl	8000a6c <display_SEG>
		break;
 80011a4:	e01b      	b.n	80011de <update7SEG+0x7e>
		HAL_GPIO_WritePin(EN_SEG_0_GPIO_Port, EN_SEG_0_Pin, SET);
 80011a6:	2201      	movs	r2, #1
 80011a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011ac:	480e      	ldr	r0, [pc, #56]	; (80011e8 <update7SEG+0x88>)
 80011ae:	f000 fe56 	bl	8001e5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_SEG_1_GPIO_Port, EN_SEG_1_Pin, RESET);
 80011b2:	2200      	movs	r2, #0
 80011b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011b8:	480b      	ldr	r0, [pc, #44]	; (80011e8 <update7SEG+0x88>)
 80011ba:	f000 fe50 	bl	8001e5e <HAL_GPIO_WritePin>
		display_SEG(data % 10);
 80011be:	683a      	ldr	r2, [r7, #0]
 80011c0:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <update7SEG+0x8c>)
 80011c2:	fb83 1302 	smull	r1, r3, r3, r2
 80011c6:	1099      	asrs	r1, r3, #2
 80011c8:	17d3      	asrs	r3, r2, #31
 80011ca:	1ac9      	subs	r1, r1, r3
 80011cc:	460b      	mov	r3, r1
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	440b      	add	r3, r1
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	1ad1      	subs	r1, r2, r3
 80011d6:	4608      	mov	r0, r1
 80011d8:	f7ff fc48 	bl	8000a6c <display_SEG>
		break;
 80011dc:	bf00      	nop
	}
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40010c00 	.word	0x40010c00
 80011ec:	66666667 	.word	0x66666667

080011f0 <update7LED>:

void update7LED(int index, int data) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
	switch (index) {
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d003      	beq.n	8001208 <update7LED+0x18>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d017      	beq.n	8001236 <update7LED+0x46>
		HAL_GPIO_WritePin(EN_LED_0_GPIO_Port, EN_LED_0_Pin, SET);
		HAL_GPIO_WritePin(EN_LED_1_GPIO_Port, EN_LED_1_Pin, RESET);
		display_LED(data % 10);
		break;
	default:
		break;
 8001206:	e032      	b.n	800126e <update7LED+0x7e>
		HAL_GPIO_WritePin(EN_LED_0_GPIO_Port, EN_LED_0_Pin, RESET);
 8001208:	2200      	movs	r2, #0
 800120a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800120e:	481a      	ldr	r0, [pc, #104]	; (8001278 <update7LED+0x88>)
 8001210:	f000 fe25 	bl	8001e5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_LED_1_GPIO_Port, EN_LED_1_Pin, SET);
 8001214:	2201      	movs	r2, #1
 8001216:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800121a:	4817      	ldr	r0, [pc, #92]	; (8001278 <update7LED+0x88>)
 800121c:	f000 fe1f 	bl	8001e5e <HAL_GPIO_WritePin>
		display_LED(data / 10);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	4a16      	ldr	r2, [pc, #88]	; (800127c <update7LED+0x8c>)
 8001224:	fb82 1203 	smull	r1, r2, r2, r3
 8001228:	1092      	asrs	r2, r2, #2
 800122a:	17db      	asrs	r3, r3, #31
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff fdf2 	bl	8000e18 <display_LED>
		break;
 8001234:	e01b      	b.n	800126e <update7LED+0x7e>
		HAL_GPIO_WritePin(EN_LED_0_GPIO_Port, EN_LED_0_Pin, SET);
 8001236:	2201      	movs	r2, #1
 8001238:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800123c:	480e      	ldr	r0, [pc, #56]	; (8001278 <update7LED+0x88>)
 800123e:	f000 fe0e 	bl	8001e5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_LED_1_GPIO_Port, EN_LED_1_Pin, RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001248:	480b      	ldr	r0, [pc, #44]	; (8001278 <update7LED+0x88>)
 800124a:	f000 fe08 	bl	8001e5e <HAL_GPIO_WritePin>
		display_LED(data % 10);
 800124e:	683a      	ldr	r2, [r7, #0]
 8001250:	4b0a      	ldr	r3, [pc, #40]	; (800127c <update7LED+0x8c>)
 8001252:	fb83 1302 	smull	r1, r3, r3, r2
 8001256:	1099      	asrs	r1, r3, #2
 8001258:	17d3      	asrs	r3, r2, #31
 800125a:	1ac9      	subs	r1, r1, r3
 800125c:	460b      	mov	r3, r1
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	440b      	add	r3, r1
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	1ad1      	subs	r1, r2, r3
 8001266:	4608      	mov	r0, r1
 8001268:	f7ff fdd6 	bl	8000e18 <display_LED>
		break;
 800126c:	bf00      	nop
	}
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40010c00 	.word	0x40010c00
 800127c:	66666667 	.word	0x66666667

08001280 <segRun1>:
void segRun1() {
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
	update7SEG(0, SEGData);
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <segRun1+0x20>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4619      	mov	r1, r3
 800128a:	2000      	movs	r0, #0
 800128c:	f7ff ff68 	bl	8001160 <update7SEG>
	update7LED(0, LEDData);
 8001290:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <segRun1+0x24>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4619      	mov	r1, r3
 8001296:	2000      	movs	r0, #0
 8001298:	f7ff ffaa 	bl	80011f0 <update7LED>

}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000068 	.word	0x20000068
 80012a4:	2000006c 	.word	0x2000006c

080012a8 <segRun2>:

void segRun2() {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
	update7SEG(1, SEGData);
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <segRun2+0x20>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4619      	mov	r1, r3
 80012b2:	2001      	movs	r0, #1
 80012b4:	f7ff ff54 	bl	8001160 <update7SEG>
	update7LED(1, LEDData);
 80012b8:	4b04      	ldr	r3, [pc, #16]	; (80012cc <segRun2+0x24>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4619      	mov	r1, r3
 80012be:	2001      	movs	r0, #1
 80012c0:	f7ff ff96 	bl	80011f0 <update7LED>
}
 80012c4:	bf00      	nop
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000068 	.word	0x20000068
 80012cc:	2000006c 	.word	0x2000006c

080012d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012d4:	f000 fac2 	bl	800185c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012d8:	f000 f81a 	bl	8001310 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012dc:	f000 f8a0 	bl	8001420 <MX_GPIO_Init>
  MX_TIM2_Init();
 80012e0:	f000 f852 	bl	8001388 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80012e4:	4809      	ldr	r0, [pc, #36]	; (800130c <main+0x3c>)
 80012e6:	f001 f9ff 	bl	80026e8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
setTimer1(100);
 80012ea:	2064      	movs	r0, #100	; 0x64
 80012ec:	f000 f912 	bl	8001514 <setTimer1>
setTimer2(100);
 80012f0:	2064      	movs	r0, #100	; 0x64
 80012f2:	f000 f93d 	bl	8001570 <setTimer2>
setTimer3(100);
 80012f6:	2064      	movs	r0, #100	; 0x64
 80012f8:	f000 f968 	bl	80015cc <setTimer3>
setTimer4(100);
 80012fc:	2064      	movs	r0, #100	; 0x64
 80012fe:	f000 f993 	bl	8001628 <setTimer4>
  while (1)
  {
	 fsm_automatic();
 8001302:	f7ff f847 	bl	8000394 <fsm_automatic>
	 fsm_manual();
 8001306:	f7ff f9b9 	bl	800067c <fsm_manual>
	 fsm_automatic();
 800130a:	e7fa      	b.n	8001302 <main+0x32>
 800130c:	200000c4 	.word	0x200000c4

08001310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b090      	sub	sp, #64	; 0x40
 8001314:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001316:	f107 0318 	add.w	r3, r7, #24
 800131a:	2228      	movs	r2, #40	; 0x28
 800131c:	2100      	movs	r1, #0
 800131e:	4618      	mov	r0, r3
 8001320:	f001 fd92 	bl	8002e48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
 8001330:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001332:	2302      	movs	r3, #2
 8001334:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001336:	2301      	movs	r3, #1
 8001338:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800133a:	2310      	movs	r3, #16
 800133c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800133e:	2300      	movs	r3, #0
 8001340:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001342:	f107 0318 	add.w	r3, r7, #24
 8001346:	4618      	mov	r0, r3
 8001348:	f000 fda2 	bl	8001e90 <HAL_RCC_OscConfig>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001352:	f000 f8d9 	bl	8001508 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001356:	230f      	movs	r3, #15
 8001358:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800135a:	2300      	movs	r3, #0
 800135c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f001 f80e 	bl	8002390 <HAL_RCC_ClockConfig>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800137a:	f000 f8c5 	bl	8001508 <Error_Handler>
  }
}
 800137e:	bf00      	nop
 8001380:	3740      	adds	r7, #64	; 0x40
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800138e:	f107 0308 	add.w	r3, r7, #8
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800139c:	463b      	mov	r3, r7
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013a4:	4b1d      	ldr	r3, [pc, #116]	; (800141c <MX_TIM2_Init+0x94>)
 80013a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80013ac:	4b1b      	ldr	r3, [pc, #108]	; (800141c <MX_TIM2_Init+0x94>)
 80013ae:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80013b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b4:	4b19      	ldr	r3, [pc, #100]	; (800141c <MX_TIM2_Init+0x94>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80013ba:	4b18      	ldr	r3, [pc, #96]	; (800141c <MX_TIM2_Init+0x94>)
 80013bc:	2209      	movs	r2, #9
 80013be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c0:	4b16      	ldr	r3, [pc, #88]	; (800141c <MX_TIM2_Init+0x94>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c6:	4b15      	ldr	r3, [pc, #84]	; (800141c <MX_TIM2_Init+0x94>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013cc:	4813      	ldr	r0, [pc, #76]	; (800141c <MX_TIM2_Init+0x94>)
 80013ce:	f001 f93b 	bl	8002648 <HAL_TIM_Base_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80013d8:	f000 f896 	bl	8001508 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013e2:	f107 0308 	add.w	r3, r7, #8
 80013e6:	4619      	mov	r1, r3
 80013e8:	480c      	ldr	r0, [pc, #48]	; (800141c <MX_TIM2_Init+0x94>)
 80013ea:	f001 fab9 	bl	8002960 <HAL_TIM_ConfigClockSource>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80013f4:	f000 f888 	bl	8001508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f8:	2300      	movs	r3, #0
 80013fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001400:	463b      	mov	r3, r7
 8001402:	4619      	mov	r1, r3
 8001404:	4805      	ldr	r0, [pc, #20]	; (800141c <MX_TIM2_Init+0x94>)
 8001406:	f001 fc91 	bl	8002d2c <HAL_TIMEx_MasterConfigSynchronization>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001410:	f000 f87a 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001414:	bf00      	nop
 8001416:	3718      	adds	r7, #24
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	200000c4 	.word	0x200000c4

08001420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001426:	f107 0308 	add.w	r3, r7, #8
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001434:	4b28      	ldr	r3, [pc, #160]	; (80014d8 <MX_GPIO_Init+0xb8>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	4a27      	ldr	r2, [pc, #156]	; (80014d8 <MX_GPIO_Init+0xb8>)
 800143a:	f043 0304 	orr.w	r3, r3, #4
 800143e:	6193      	str	r3, [r2, #24]
 8001440:	4b25      	ldr	r3, [pc, #148]	; (80014d8 <MX_GPIO_Init+0xb8>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	f003 0304 	and.w	r3, r3, #4
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800144c:	4b22      	ldr	r3, [pc, #136]	; (80014d8 <MX_GPIO_Init+0xb8>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	4a21      	ldr	r2, [pc, #132]	; (80014d8 <MX_GPIO_Init+0xb8>)
 8001452:	f043 0308 	orr.w	r3, r3, #8
 8001456:	6193      	str	r3, [r2, #24]
 8001458:	4b1f      	ldr	r3, [pc, #124]	; (80014d8 <MX_GPIO_Init+0xb8>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	f003 0308 	and.w	r3, r3, #8
 8001460:	603b      	str	r3, [r7, #0]
 8001462:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_1_Pin|GREEN_1_Pin|YELLOW_1_Pin|RED_2_Pin
 8001464:	2200      	movs	r2, #0
 8001466:	f64f 613f 	movw	r1, #65087	; 0xfe3f
 800146a:	481c      	ldr	r0, [pc, #112]	; (80014dc <MX_GPIO_Init+0xbc>)
 800146c:	f000 fcf7 	bl	8001e5e <HAL_GPIO_WritePin>
                          |GREEN_2_Pin|YELLOW_2_Pin|SEG_0_Pin|SEG_1_Pin
                          |SEG_2_Pin|SEG_3_Pin|SEG_4_Pin|SEG_5_Pin
                          |SEG_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_SEG_0_Pin|EN_SEG_1_Pin|EN_LED_0_Pin|EN_LED_1_Pin
 8001470:	2200      	movs	r2, #0
 8001472:	f647 31f8 	movw	r1, #31736	; 0x7bf8
 8001476:	481a      	ldr	r0, [pc, #104]	; (80014e0 <MX_GPIO_Init+0xc0>)
 8001478:	f000 fcf1 	bl	8001e5e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RED_1_Pin GREEN_1_Pin YELLOW_1_Pin RED_2_Pin
                           GREEN_2_Pin YELLOW_2_Pin SEG_0_Pin SEG_1_Pin
                           SEG_2_Pin SEG_3_Pin SEG_4_Pin SEG_5_Pin
                           SEG_6_Pin */
  GPIO_InitStruct.Pin = RED_1_Pin|GREEN_1_Pin|YELLOW_1_Pin|RED_2_Pin
 800147c:	f64f 633f 	movw	r3, #65087	; 0xfe3f
 8001480:	60bb      	str	r3, [r7, #8]
                          |GREEN_2_Pin|YELLOW_2_Pin|SEG_0_Pin|SEG_1_Pin
                          |SEG_2_Pin|SEG_3_Pin|SEG_4_Pin|SEG_5_Pin
                          |SEG_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001482:	2301      	movs	r3, #1
 8001484:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148a:	2302      	movs	r3, #2
 800148c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148e:	f107 0308 	add.w	r3, r7, #8
 8001492:	4619      	mov	r1, r3
 8001494:	4811      	ldr	r0, [pc, #68]	; (80014dc <MX_GPIO_Init+0xbc>)
 8001496:	f000 fb51 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 800149a:	2307      	movs	r3, #7
 800149c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014a2:	2301      	movs	r3, #1
 80014a4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a6:	f107 0308 	add.w	r3, r7, #8
 80014aa:	4619      	mov	r1, r3
 80014ac:	480c      	ldr	r0, [pc, #48]	; (80014e0 <MX_GPIO_Init+0xc0>)
 80014ae:	f000 fb45 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_SEG_0_Pin EN_SEG_1_Pin EN_LED_0_Pin EN_LED_1_Pin
                           LED_0_Pin LED_1_Pin LED_2_Pin LED_3_Pin
                           LED_4_Pin LED_5_Pin LED_6_Pin */
  GPIO_InitStruct.Pin = EN_SEG_0_Pin|EN_SEG_1_Pin|EN_LED_0_Pin|EN_LED_1_Pin
 80014b2:	f647 33f8 	movw	r3, #31736	; 0x7bf8
 80014b6:	60bb      	str	r3, [r7, #8]
                          |LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin
                          |LED_4_Pin|LED_5_Pin|LED_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b8:	2301      	movs	r3, #1
 80014ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	2302      	movs	r3, #2
 80014c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c4:	f107 0308 	add.w	r3, r7, #8
 80014c8:	4619      	mov	r1, r3
 80014ca:	4805      	ldr	r0, [pc, #20]	; (80014e0 <MX_GPIO_Init+0xc0>)
 80014cc:	f000 fb36 	bl	8001b3c <HAL_GPIO_Init>

}
 80014d0:	bf00      	nop
 80014d2:	3718      	adds	r7, #24
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40010800 	.word	0x40010800
 80014e0:	40010c00 	.word	0x40010c00

080014e4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
	timer1Run();
 80014ec:	f000 f826 	bl	800153c <timer1Run>
	timer2Run();
 80014f0:	f000 f852 	bl	8001598 <timer2Run>
	timer3Run();
 80014f4:	f000 f87e 	bl	80015f4 <timer3Run>
	timer4Run();
 80014f8:	f000 f8aa 	bl	8001650 <timer4Run>
	getKeyInput();
 80014fc:	f7fe fe50 	bl	80001a0 <getKeyInput>
}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800150c:	b672      	cpsid	i
}
 800150e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001510:	e7fe      	b.n	8001510 <Error_Handler+0x8>
	...

08001514 <setTimer1>:
int timer3_flag=0;
int timer3_counter=0;
int timer4_flag=0;
int timer4_counter=0;

void setTimer1(int duration){
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
	timer1_counter=duration;
 800151c:	4a05      	ldr	r2, [pc, #20]	; (8001534 <setTimer1+0x20>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6013      	str	r3, [r2, #0]
	timer1_flag=0;
 8001522:	4b05      	ldr	r3, [pc, #20]	; (8001538 <setTimer1+0x24>)
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	bc80      	pop	{r7}
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	20000090 	.word	0x20000090
 8001538:	2000008c 	.word	0x2000008c

0800153c <timer1Run>:
void timer1Run(){
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
	if(timer1_counter>0){
 8001540:	4b09      	ldr	r3, [pc, #36]	; (8001568 <timer1Run+0x2c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	dd0b      	ble.n	8001560 <timer1Run+0x24>
		timer1_counter--;
 8001548:	4b07      	ldr	r3, [pc, #28]	; (8001568 <timer1Run+0x2c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	3b01      	subs	r3, #1
 800154e:	4a06      	ldr	r2, [pc, #24]	; (8001568 <timer1Run+0x2c>)
 8001550:	6013      	str	r3, [r2, #0]
		if(timer1_counter<=0){
 8001552:	4b05      	ldr	r3, [pc, #20]	; (8001568 <timer1Run+0x2c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	dc02      	bgt.n	8001560 <timer1Run+0x24>
		timer1_flag=1;
 800155a:	4b04      	ldr	r3, [pc, #16]	; (800156c <timer1Run+0x30>)
 800155c:	2201      	movs	r2, #1
 800155e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	20000090 	.word	0x20000090
 800156c:	2000008c 	.word	0x2000008c

08001570 <setTimer2>:
void setTimer2(int duration){
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
	timer2_counter=duration;
 8001578:	4a05      	ldr	r2, [pc, #20]	; (8001590 <setTimer2+0x20>)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6013      	str	r3, [r2, #0]
	timer2_flag=0;
 800157e:	4b05      	ldr	r3, [pc, #20]	; (8001594 <setTimer2+0x24>)
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	20000098 	.word	0x20000098
 8001594:	20000094 	.word	0x20000094

08001598 <timer2Run>:
void timer2Run(){
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
	if(timer2_counter>0){
 800159c:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <timer2Run+0x2c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	dd0b      	ble.n	80015bc <timer2Run+0x24>
		timer2_counter--;
 80015a4:	4b07      	ldr	r3, [pc, #28]	; (80015c4 <timer2Run+0x2c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	3b01      	subs	r3, #1
 80015aa:	4a06      	ldr	r2, [pc, #24]	; (80015c4 <timer2Run+0x2c>)
 80015ac:	6013      	str	r3, [r2, #0]
		if(timer2_counter<=0){
 80015ae:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <timer2Run+0x2c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	dc02      	bgt.n	80015bc <timer2Run+0x24>
		timer2_flag=1;
 80015b6:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <timer2Run+0x30>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	601a      	str	r2, [r3, #0]
		}
	}
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr
 80015c4:	20000098 	.word	0x20000098
 80015c8:	20000094 	.word	0x20000094

080015cc <setTimer3>:
void setTimer3(int duration){
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
	timer3_counter=duration;
 80015d4:	4a05      	ldr	r2, [pc, #20]	; (80015ec <setTimer3+0x20>)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6013      	str	r3, [r2, #0]
	timer3_flag=0;
 80015da:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <setTimer3+0x24>)
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	200000a0 	.word	0x200000a0
 80015f0:	2000009c 	.word	0x2000009c

080015f4 <timer3Run>:
void timer3Run(){
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
	if(timer3_counter>0){
 80015f8:	4b09      	ldr	r3, [pc, #36]	; (8001620 <timer3Run+0x2c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	dd0b      	ble.n	8001618 <timer3Run+0x24>
		timer3_counter--;
 8001600:	4b07      	ldr	r3, [pc, #28]	; (8001620 <timer3Run+0x2c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	3b01      	subs	r3, #1
 8001606:	4a06      	ldr	r2, [pc, #24]	; (8001620 <timer3Run+0x2c>)
 8001608:	6013      	str	r3, [r2, #0]
		if(timer3_counter<=0){
 800160a:	4b05      	ldr	r3, [pc, #20]	; (8001620 <timer3Run+0x2c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	dc02      	bgt.n	8001618 <timer3Run+0x24>
		timer3_flag=1;
 8001612:	4b04      	ldr	r3, [pc, #16]	; (8001624 <timer3Run+0x30>)
 8001614:	2201      	movs	r2, #1
 8001616:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr
 8001620:	200000a0 	.word	0x200000a0
 8001624:	2000009c 	.word	0x2000009c

08001628 <setTimer4>:
void setTimer4(int duration){
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
	timer4_counter=duration;
 8001630:	4a05      	ldr	r2, [pc, #20]	; (8001648 <setTimer4+0x20>)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6013      	str	r3, [r2, #0]
	timer4_flag=0;
 8001636:	4b05      	ldr	r3, [pc, #20]	; (800164c <setTimer4+0x24>)
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	200000a8 	.word	0x200000a8
 800164c:	200000a4 	.word	0x200000a4

08001650 <timer4Run>:
void timer4Run(){
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
	if(timer4_counter>0){
 8001654:	4b09      	ldr	r3, [pc, #36]	; (800167c <timer4Run+0x2c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	dd0b      	ble.n	8001674 <timer4Run+0x24>
		timer4_counter--;
 800165c:	4b07      	ldr	r3, [pc, #28]	; (800167c <timer4Run+0x2c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	3b01      	subs	r3, #1
 8001662:	4a06      	ldr	r2, [pc, #24]	; (800167c <timer4Run+0x2c>)
 8001664:	6013      	str	r3, [r2, #0]
		if(timer4_counter<=0){
 8001666:	4b05      	ldr	r3, [pc, #20]	; (800167c <timer4Run+0x2c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	dc02      	bgt.n	8001674 <timer4Run+0x24>
		timer4_flag=1;
 800166e:	4b04      	ldr	r3, [pc, #16]	; (8001680 <timer4Run+0x30>)
 8001670:	2201      	movs	r2, #1
 8001672:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr
 800167c:	200000a8 	.word	0x200000a8
 8001680:	200000a4 	.word	0x200000a4

08001684 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800168a:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <HAL_MspInit+0x5c>)
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	4a14      	ldr	r2, [pc, #80]	; (80016e0 <HAL_MspInit+0x5c>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6193      	str	r3, [r2, #24]
 8001696:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <HAL_MspInit+0x5c>)
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a2:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <HAL_MspInit+0x5c>)
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	4a0e      	ldr	r2, [pc, #56]	; (80016e0 <HAL_MspInit+0x5c>)
 80016a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ac:	61d3      	str	r3, [r2, #28]
 80016ae:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <HAL_MspInit+0x5c>)
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80016ba:	4b0a      	ldr	r3, [pc, #40]	; (80016e4 <HAL_MspInit+0x60>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	4a04      	ldr	r2, [pc, #16]	; (80016e4 <HAL_MspInit+0x60>)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016d6:	bf00      	nop
 80016d8:	3714      	adds	r7, #20
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr
 80016e0:	40021000 	.word	0x40021000
 80016e4:	40010000 	.word	0x40010000

080016e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016f8:	d113      	bne.n	8001722 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016fa:	4b0c      	ldr	r3, [pc, #48]	; (800172c <HAL_TIM_Base_MspInit+0x44>)
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	4a0b      	ldr	r2, [pc, #44]	; (800172c <HAL_TIM_Base_MspInit+0x44>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	61d3      	str	r3, [r2, #28]
 8001706:	4b09      	ldr	r3, [pc, #36]	; (800172c <HAL_TIM_Base_MspInit+0x44>)
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001712:	2200      	movs	r2, #0
 8001714:	2100      	movs	r1, #0
 8001716:	201c      	movs	r0, #28
 8001718:	f000 f9d9 	bl	8001ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800171c:	201c      	movs	r0, #28
 800171e:	f000 f9f2 	bl	8001b06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001722:	bf00      	nop
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40021000 	.word	0x40021000

08001730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001734:	e7fe      	b.n	8001734 <NMI_Handler+0x4>

08001736 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800173a:	e7fe      	b.n	800173a <HardFault_Handler+0x4>

0800173c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001740:	e7fe      	b.n	8001740 <MemManage_Handler+0x4>

08001742 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001746:	e7fe      	b.n	8001746 <BusFault_Handler+0x4>

08001748 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800174c:	e7fe      	b.n	800174c <UsageFault_Handler+0x4>

0800174e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	46bd      	mov	sp, r7
 8001756:	bc80      	pop	{r7}
 8001758:	4770      	bx	lr

0800175a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr

08001766 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	bc80      	pop	{r7}
 8001770:	4770      	bx	lr

08001772 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001776:	f000 f8b7 	bl	80018e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001784:	4802      	ldr	r0, [pc, #8]	; (8001790 <TIM2_IRQHandler+0x10>)
 8001786:	f000 fffb 	bl	8002780 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	200000c4 	.word	0x200000c4

08001794 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr

080017a0 <displaylight>:


#include "traffic_light.h"


void displaylight (int red1, int green1, int yellow1, int red2, int green2, int yellow2){
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
 80017ac:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, red1);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	461a      	mov	r2, r3
 80017b4:	2101      	movs	r1, #1
 80017b6:	4815      	ldr	r0, [pc, #84]	; (800180c <displaylight+0x6c>)
 80017b8:	f000 fb51 	bl	8001e5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, green1);
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	461a      	mov	r2, r3
 80017c2:	2102      	movs	r1, #2
 80017c4:	4811      	ldr	r0, [pc, #68]	; (800180c <displaylight+0x6c>)
 80017c6:	f000 fb4a 	bl	8001e5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, yellow1);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	461a      	mov	r2, r3
 80017d0:	2104      	movs	r1, #4
 80017d2:	480e      	ldr	r0, [pc, #56]	; (800180c <displaylight+0x6c>)
 80017d4:	f000 fb43 	bl	8001e5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, red2);
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	461a      	mov	r2, r3
 80017de:	2108      	movs	r1, #8
 80017e0:	480a      	ldr	r0, [pc, #40]	; (800180c <displaylight+0x6c>)
 80017e2:	f000 fb3c 	bl	8001e5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, green2);
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	461a      	mov	r2, r3
 80017ec:	2110      	movs	r1, #16
 80017ee:	4807      	ldr	r0, [pc, #28]	; (800180c <displaylight+0x6c>)
 80017f0:	f000 fb35 	bl	8001e5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, yellow2);
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	461a      	mov	r2, r3
 80017fa:	2120      	movs	r1, #32
 80017fc:	4803      	ldr	r0, [pc, #12]	; (800180c <displaylight+0x6c>)
 80017fe:	f000 fb2e 	bl	8001e5e <HAL_GPIO_WritePin>

}
 8001802:	bf00      	nop
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40010800 	.word	0x40010800

08001810 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001810:	f7ff ffc0 	bl	8001794 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001814:	480b      	ldr	r0, [pc, #44]	; (8001844 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001816:	490c      	ldr	r1, [pc, #48]	; (8001848 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001818:	4a0c      	ldr	r2, [pc, #48]	; (800184c <LoopFillZerobss+0x16>)
  movs r3, #0
 800181a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800181c:	e002      	b.n	8001824 <LoopCopyDataInit>

0800181e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800181e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001822:	3304      	adds	r3, #4

08001824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001828:	d3f9      	bcc.n	800181e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800182a:	4a09      	ldr	r2, [pc, #36]	; (8001850 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800182c:	4c09      	ldr	r4, [pc, #36]	; (8001854 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800182e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001830:	e001      	b.n	8001836 <LoopFillZerobss>

08001832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001834:	3204      	adds	r2, #4

08001836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001838:	d3fb      	bcc.n	8001832 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800183a:	f001 fae1 	bl	8002e00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800183e:	f7ff fd47 	bl	80012d0 <main>
  bx lr
 8001842:	4770      	bx	lr
  ldr r0, =_sdata
 8001844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001848:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 800184c:	08002e9c 	.word	0x08002e9c
  ldr r2, =_sbss
 8001850:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 8001854:	20000110 	.word	0x20000110

08001858 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001858:	e7fe      	b.n	8001858 <ADC1_2_IRQHandler>
	...

0800185c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <HAL_Init+0x28>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a07      	ldr	r2, [pc, #28]	; (8001884 <HAL_Init+0x28>)
 8001866:	f043 0310 	orr.w	r3, r3, #16
 800186a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800186c:	2003      	movs	r0, #3
 800186e:	f000 f923 	bl	8001ab8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001872:	200f      	movs	r0, #15
 8001874:	f000 f808 	bl	8001888 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001878:	f7ff ff04 	bl	8001684 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40022000 	.word	0x40022000

08001888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001890:	4b12      	ldr	r3, [pc, #72]	; (80018dc <HAL_InitTick+0x54>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <HAL_InitTick+0x58>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	4619      	mov	r1, r3
 800189a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800189e:	fbb3 f3f1 	udiv	r3, r3, r1
 80018a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 f93b 	bl	8001b22 <HAL_SYSTICK_Config>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e00e      	b.n	80018d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2b0f      	cmp	r3, #15
 80018ba:	d80a      	bhi.n	80018d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018bc:	2200      	movs	r2, #0
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	f04f 30ff 	mov.w	r0, #4294967295
 80018c4:	f000 f903 	bl	8001ace <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018c8:	4a06      	ldr	r2, [pc, #24]	; (80018e4 <HAL_InitTick+0x5c>)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
 80018d0:	e000      	b.n	80018d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20000040 	.word	0x20000040
 80018e0:	20000048 	.word	0x20000048
 80018e4:	20000044 	.word	0x20000044

080018e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <HAL_IncTick+0x1c>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	461a      	mov	r2, r3
 80018f2:	4b05      	ldr	r3, [pc, #20]	; (8001908 <HAL_IncTick+0x20>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4413      	add	r3, r2
 80018f8:	4a03      	ldr	r2, [pc, #12]	; (8001908 <HAL_IncTick+0x20>)
 80018fa:	6013      	str	r3, [r2, #0]
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr
 8001904:	20000048 	.word	0x20000048
 8001908:	2000010c 	.word	0x2000010c

0800190c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return uwTick;
 8001910:	4b02      	ldr	r3, [pc, #8]	; (800191c <HAL_GetTick+0x10>)
 8001912:	681b      	ldr	r3, [r3, #0]
}
 8001914:	4618      	mov	r0, r3
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr
 800191c:	2000010c 	.word	0x2000010c

08001920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001930:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <__NVIC_SetPriorityGrouping+0x44>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800193c:	4013      	ands	r3, r2
 800193e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001948:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800194c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001952:	4a04      	ldr	r2, [pc, #16]	; (8001964 <__NVIC_SetPriorityGrouping+0x44>)
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	60d3      	str	r3, [r2, #12]
}
 8001958:	bf00      	nop
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800196c:	4b04      	ldr	r3, [pc, #16]	; (8001980 <__NVIC_GetPriorityGrouping+0x18>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	0a1b      	lsrs	r3, r3, #8
 8001972:	f003 0307 	and.w	r3, r3, #7
}
 8001976:	4618      	mov	r0, r3
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800198e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001992:	2b00      	cmp	r3, #0
 8001994:	db0b      	blt.n	80019ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	f003 021f 	and.w	r2, r3, #31
 800199c:	4906      	ldr	r1, [pc, #24]	; (80019b8 <__NVIC_EnableIRQ+0x34>)
 800199e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a2:	095b      	lsrs	r3, r3, #5
 80019a4:	2001      	movs	r0, #1
 80019a6:	fa00 f202 	lsl.w	r2, r0, r2
 80019aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr
 80019b8:	e000e100 	.word	0xe000e100

080019bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	6039      	str	r1, [r7, #0]
 80019c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	db0a      	blt.n	80019e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	490c      	ldr	r1, [pc, #48]	; (8001a08 <__NVIC_SetPriority+0x4c>)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	0112      	lsls	r2, r2, #4
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	440b      	add	r3, r1
 80019e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019e4:	e00a      	b.n	80019fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	4908      	ldr	r1, [pc, #32]	; (8001a0c <__NVIC_SetPriority+0x50>)
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	3b04      	subs	r3, #4
 80019f4:	0112      	lsls	r2, r2, #4
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	440b      	add	r3, r1
 80019fa:	761a      	strb	r2, [r3, #24]
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bc80      	pop	{r7}
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	e000e100 	.word	0xe000e100
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b089      	sub	sp, #36	; 0x24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	f1c3 0307 	rsb	r3, r3, #7
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	bf28      	it	cs
 8001a2e:	2304      	movcs	r3, #4
 8001a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	3304      	adds	r3, #4
 8001a36:	2b06      	cmp	r3, #6
 8001a38:	d902      	bls.n	8001a40 <NVIC_EncodePriority+0x30>
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	3b03      	subs	r3, #3
 8001a3e:	e000      	b.n	8001a42 <NVIC_EncodePriority+0x32>
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a44:	f04f 32ff 	mov.w	r2, #4294967295
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43da      	mvns	r2, r3
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	401a      	ands	r2, r3
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a58:	f04f 31ff 	mov.w	r1, #4294967295
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a62:	43d9      	mvns	r1, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a68:	4313      	orrs	r3, r2
         );
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3724      	adds	r7, #36	; 0x24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr

08001a74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a84:	d301      	bcc.n	8001a8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a86:	2301      	movs	r3, #1
 8001a88:	e00f      	b.n	8001aaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a8a:	4a0a      	ldr	r2, [pc, #40]	; (8001ab4 <SysTick_Config+0x40>)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a92:	210f      	movs	r1, #15
 8001a94:	f04f 30ff 	mov.w	r0, #4294967295
 8001a98:	f7ff ff90 	bl	80019bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a9c:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <SysTick_Config+0x40>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aa2:	4b04      	ldr	r3, [pc, #16]	; (8001ab4 <SysTick_Config+0x40>)
 8001aa4:	2207      	movs	r2, #7
 8001aa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	e000e010 	.word	0xe000e010

08001ab8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f7ff ff2d 	bl	8001920 <__NVIC_SetPriorityGrouping>
}
 8001ac6:	bf00      	nop
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b086      	sub	sp, #24
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	60b9      	str	r1, [r7, #8]
 8001ad8:	607a      	str	r2, [r7, #4]
 8001ada:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001adc:	2300      	movs	r3, #0
 8001ade:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ae0:	f7ff ff42 	bl	8001968 <__NVIC_GetPriorityGrouping>
 8001ae4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	68b9      	ldr	r1, [r7, #8]
 8001aea:	6978      	ldr	r0, [r7, #20]
 8001aec:	f7ff ff90 	bl	8001a10 <NVIC_EncodePriority>
 8001af0:	4602      	mov	r2, r0
 8001af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001af6:	4611      	mov	r1, r2
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff ff5f 	bl	80019bc <__NVIC_SetPriority>
}
 8001afe:	bf00      	nop
 8001b00:	3718      	adds	r7, #24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b082      	sub	sp, #8
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff ff35 	bl	8001984 <__NVIC_EnableIRQ>
}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b082      	sub	sp, #8
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7ff ffa2 	bl	8001a74 <SysTick_Config>
 8001b30:	4603      	mov	r3, r0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b08b      	sub	sp, #44	; 0x2c
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b46:	2300      	movs	r3, #0
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b4e:	e148      	b.n	8001de2 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b50:	2201      	movs	r2, #1
 8001b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	69fa      	ldr	r2, [r7, #28]
 8001b60:	4013      	ands	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	f040 8137 	bne.w	8001ddc <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	4aa3      	ldr	r2, [pc, #652]	; (8001e00 <HAL_GPIO_Init+0x2c4>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d05e      	beq.n	8001c36 <HAL_GPIO_Init+0xfa>
 8001b78:	4aa1      	ldr	r2, [pc, #644]	; (8001e00 <HAL_GPIO_Init+0x2c4>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d875      	bhi.n	8001c6a <HAL_GPIO_Init+0x12e>
 8001b7e:	4aa1      	ldr	r2, [pc, #644]	; (8001e04 <HAL_GPIO_Init+0x2c8>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d058      	beq.n	8001c36 <HAL_GPIO_Init+0xfa>
 8001b84:	4a9f      	ldr	r2, [pc, #636]	; (8001e04 <HAL_GPIO_Init+0x2c8>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d86f      	bhi.n	8001c6a <HAL_GPIO_Init+0x12e>
 8001b8a:	4a9f      	ldr	r2, [pc, #636]	; (8001e08 <HAL_GPIO_Init+0x2cc>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d052      	beq.n	8001c36 <HAL_GPIO_Init+0xfa>
 8001b90:	4a9d      	ldr	r2, [pc, #628]	; (8001e08 <HAL_GPIO_Init+0x2cc>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d869      	bhi.n	8001c6a <HAL_GPIO_Init+0x12e>
 8001b96:	4a9d      	ldr	r2, [pc, #628]	; (8001e0c <HAL_GPIO_Init+0x2d0>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d04c      	beq.n	8001c36 <HAL_GPIO_Init+0xfa>
 8001b9c:	4a9b      	ldr	r2, [pc, #620]	; (8001e0c <HAL_GPIO_Init+0x2d0>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d863      	bhi.n	8001c6a <HAL_GPIO_Init+0x12e>
 8001ba2:	4a9b      	ldr	r2, [pc, #620]	; (8001e10 <HAL_GPIO_Init+0x2d4>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d046      	beq.n	8001c36 <HAL_GPIO_Init+0xfa>
 8001ba8:	4a99      	ldr	r2, [pc, #612]	; (8001e10 <HAL_GPIO_Init+0x2d4>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d85d      	bhi.n	8001c6a <HAL_GPIO_Init+0x12e>
 8001bae:	2b12      	cmp	r3, #18
 8001bb0:	d82a      	bhi.n	8001c08 <HAL_GPIO_Init+0xcc>
 8001bb2:	2b12      	cmp	r3, #18
 8001bb4:	d859      	bhi.n	8001c6a <HAL_GPIO_Init+0x12e>
 8001bb6:	a201      	add	r2, pc, #4	; (adr r2, 8001bbc <HAL_GPIO_Init+0x80>)
 8001bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bbc:	08001c37 	.word	0x08001c37
 8001bc0:	08001c11 	.word	0x08001c11
 8001bc4:	08001c23 	.word	0x08001c23
 8001bc8:	08001c65 	.word	0x08001c65
 8001bcc:	08001c6b 	.word	0x08001c6b
 8001bd0:	08001c6b 	.word	0x08001c6b
 8001bd4:	08001c6b 	.word	0x08001c6b
 8001bd8:	08001c6b 	.word	0x08001c6b
 8001bdc:	08001c6b 	.word	0x08001c6b
 8001be0:	08001c6b 	.word	0x08001c6b
 8001be4:	08001c6b 	.word	0x08001c6b
 8001be8:	08001c6b 	.word	0x08001c6b
 8001bec:	08001c6b 	.word	0x08001c6b
 8001bf0:	08001c6b 	.word	0x08001c6b
 8001bf4:	08001c6b 	.word	0x08001c6b
 8001bf8:	08001c6b 	.word	0x08001c6b
 8001bfc:	08001c6b 	.word	0x08001c6b
 8001c00:	08001c19 	.word	0x08001c19
 8001c04:	08001c2d 	.word	0x08001c2d
 8001c08:	4a82      	ldr	r2, [pc, #520]	; (8001e14 <HAL_GPIO_Init+0x2d8>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d013      	beq.n	8001c36 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c0e:	e02c      	b.n	8001c6a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	623b      	str	r3, [r7, #32]
          break;
 8001c16:	e029      	b.n	8001c6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	623b      	str	r3, [r7, #32]
          break;
 8001c20:	e024      	b.n	8001c6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	3308      	adds	r3, #8
 8001c28:	623b      	str	r3, [r7, #32]
          break;
 8001c2a:	e01f      	b.n	8001c6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	330c      	adds	r3, #12
 8001c32:	623b      	str	r3, [r7, #32]
          break;
 8001c34:	e01a      	b.n	8001c6c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d102      	bne.n	8001c44 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c3e:	2304      	movs	r3, #4
 8001c40:	623b      	str	r3, [r7, #32]
          break;
 8001c42:	e013      	b.n	8001c6c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d105      	bne.n	8001c58 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c4c:	2308      	movs	r3, #8
 8001c4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	69fa      	ldr	r2, [r7, #28]
 8001c54:	611a      	str	r2, [r3, #16]
          break;
 8001c56:	e009      	b.n	8001c6c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c58:	2308      	movs	r3, #8
 8001c5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	69fa      	ldr	r2, [r7, #28]
 8001c60:	615a      	str	r2, [r3, #20]
          break;
 8001c62:	e003      	b.n	8001c6c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c64:	2300      	movs	r3, #0
 8001c66:	623b      	str	r3, [r7, #32]
          break;
 8001c68:	e000      	b.n	8001c6c <HAL_GPIO_Init+0x130>
          break;
 8001c6a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	2bff      	cmp	r3, #255	; 0xff
 8001c70:	d801      	bhi.n	8001c76 <HAL_GPIO_Init+0x13a>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	e001      	b.n	8001c7a <HAL_GPIO_Init+0x13e>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	3304      	adds	r3, #4
 8001c7a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	2bff      	cmp	r3, #255	; 0xff
 8001c80:	d802      	bhi.n	8001c88 <HAL_GPIO_Init+0x14c>
 8001c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	e002      	b.n	8001c8e <HAL_GPIO_Init+0x152>
 8001c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8a:	3b08      	subs	r3, #8
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	210f      	movs	r1, #15
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	401a      	ands	r2, r3
 8001ca0:	6a39      	ldr	r1, [r7, #32]
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 8090 	beq.w	8001ddc <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cbc:	4b56      	ldr	r3, [pc, #344]	; (8001e18 <HAL_GPIO_Init+0x2dc>)
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	4a55      	ldr	r2, [pc, #340]	; (8001e18 <HAL_GPIO_Init+0x2dc>)
 8001cc2:	f043 0301 	orr.w	r3, r3, #1
 8001cc6:	6193      	str	r3, [r2, #24]
 8001cc8:	4b53      	ldr	r3, [pc, #332]	; (8001e18 <HAL_GPIO_Init+0x2dc>)
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cd4:	4a51      	ldr	r2, [pc, #324]	; (8001e1c <HAL_GPIO_Init+0x2e0>)
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	089b      	lsrs	r3, r3, #2
 8001cda:	3302      	adds	r3, #2
 8001cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	220f      	movs	r2, #15
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a49      	ldr	r2, [pc, #292]	; (8001e20 <HAL_GPIO_Init+0x2e4>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d00d      	beq.n	8001d1c <HAL_GPIO_Init+0x1e0>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a48      	ldr	r2, [pc, #288]	; (8001e24 <HAL_GPIO_Init+0x2e8>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d007      	beq.n	8001d18 <HAL_GPIO_Init+0x1dc>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a47      	ldr	r2, [pc, #284]	; (8001e28 <HAL_GPIO_Init+0x2ec>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d101      	bne.n	8001d14 <HAL_GPIO_Init+0x1d8>
 8001d10:	2302      	movs	r3, #2
 8001d12:	e004      	b.n	8001d1e <HAL_GPIO_Init+0x1e2>
 8001d14:	2303      	movs	r3, #3
 8001d16:	e002      	b.n	8001d1e <HAL_GPIO_Init+0x1e2>
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e000      	b.n	8001d1e <HAL_GPIO_Init+0x1e2>
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d20:	f002 0203 	and.w	r2, r2, #3
 8001d24:	0092      	lsls	r2, r2, #2
 8001d26:	4093      	lsls	r3, r2
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d2e:	493b      	ldr	r1, [pc, #236]	; (8001e1c <HAL_GPIO_Init+0x2e0>)
 8001d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d32:	089b      	lsrs	r3, r3, #2
 8001d34:	3302      	adds	r3, #2
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d006      	beq.n	8001d56 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d48:	4b38      	ldr	r3, [pc, #224]	; (8001e2c <HAL_GPIO_Init+0x2f0>)
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	4937      	ldr	r1, [pc, #220]	; (8001e2c <HAL_GPIO_Init+0x2f0>)
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	608b      	str	r3, [r1, #8]
 8001d54:	e006      	b.n	8001d64 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d56:	4b35      	ldr	r3, [pc, #212]	; (8001e2c <HAL_GPIO_Init+0x2f0>)
 8001d58:	689a      	ldr	r2, [r3, #8]
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	4933      	ldr	r1, [pc, #204]	; (8001e2c <HAL_GPIO_Init+0x2f0>)
 8001d60:	4013      	ands	r3, r2
 8001d62:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d006      	beq.n	8001d7e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d70:	4b2e      	ldr	r3, [pc, #184]	; (8001e2c <HAL_GPIO_Init+0x2f0>)
 8001d72:	68da      	ldr	r2, [r3, #12]
 8001d74:	492d      	ldr	r1, [pc, #180]	; (8001e2c <HAL_GPIO_Init+0x2f0>)
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	60cb      	str	r3, [r1, #12]
 8001d7c:	e006      	b.n	8001d8c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d7e:	4b2b      	ldr	r3, [pc, #172]	; (8001e2c <HAL_GPIO_Init+0x2f0>)
 8001d80:	68da      	ldr	r2, [r3, #12]
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	43db      	mvns	r3, r3
 8001d86:	4929      	ldr	r1, [pc, #164]	; (8001e2c <HAL_GPIO_Init+0x2f0>)
 8001d88:	4013      	ands	r3, r2
 8001d8a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d006      	beq.n	8001da6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d98:	4b24      	ldr	r3, [pc, #144]	; (8001e2c <HAL_GPIO_Init+0x2f0>)
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	4923      	ldr	r1, [pc, #140]	; (8001e2c <HAL_GPIO_Init+0x2f0>)
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	604b      	str	r3, [r1, #4]
 8001da4:	e006      	b.n	8001db4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001da6:	4b21      	ldr	r3, [pc, #132]	; (8001e2c <HAL_GPIO_Init+0x2f0>)
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	43db      	mvns	r3, r3
 8001dae:	491f      	ldr	r1, [pc, #124]	; (8001e2c <HAL_GPIO_Init+0x2f0>)
 8001db0:	4013      	ands	r3, r2
 8001db2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d006      	beq.n	8001dce <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001dc0:	4b1a      	ldr	r3, [pc, #104]	; (8001e2c <HAL_GPIO_Init+0x2f0>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4919      	ldr	r1, [pc, #100]	; (8001e2c <HAL_GPIO_Init+0x2f0>)
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	600b      	str	r3, [r1, #0]
 8001dcc:	e006      	b.n	8001ddc <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001dce:	4b17      	ldr	r3, [pc, #92]	; (8001e2c <HAL_GPIO_Init+0x2f0>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	4915      	ldr	r1, [pc, #84]	; (8001e2c <HAL_GPIO_Init+0x2f0>)
 8001dd8:	4013      	ands	r3, r2
 8001dda:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dde:	3301      	adds	r3, #1
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f47f aeaf 	bne.w	8001b50 <HAL_GPIO_Init+0x14>
  }
}
 8001df2:	bf00      	nop
 8001df4:	bf00      	nop
 8001df6:	372c      	adds	r7, #44	; 0x2c
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bc80      	pop	{r7}
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	10320000 	.word	0x10320000
 8001e04:	10310000 	.word	0x10310000
 8001e08:	10220000 	.word	0x10220000
 8001e0c:	10210000 	.word	0x10210000
 8001e10:	10120000 	.word	0x10120000
 8001e14:	10110000 	.word	0x10110000
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	40010000 	.word	0x40010000
 8001e20:	40010800 	.word	0x40010800
 8001e24:	40010c00 	.word	0x40010c00
 8001e28:	40011000 	.word	0x40011000
 8001e2c:	40010400 	.word	0x40010400

08001e30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	887b      	ldrh	r3, [r7, #2]
 8001e42:	4013      	ands	r3, r2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d002      	beq.n	8001e4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	73fb      	strb	r3, [r7, #15]
 8001e4c:	e001      	b.n	8001e52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc80      	pop	{r7}
 8001e5c:	4770      	bx	lr

08001e5e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	460b      	mov	r3, r1
 8001e68:	807b      	strh	r3, [r7, #2]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e6e:	787b      	ldrb	r3, [r7, #1]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d003      	beq.n	8001e7c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e74:	887a      	ldrh	r2, [r7, #2]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e7a:	e003      	b.n	8001e84 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e7c:	887b      	ldrh	r3, [r7, #2]
 8001e7e:	041a      	lsls	r2, r3, #16
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	611a      	str	r2, [r3, #16]
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr
	...

08001e90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e26c      	b.n	800237c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f000 8087 	beq.w	8001fbe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001eb0:	4b92      	ldr	r3, [pc, #584]	; (80020fc <HAL_RCC_OscConfig+0x26c>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 030c 	and.w	r3, r3, #12
 8001eb8:	2b04      	cmp	r3, #4
 8001eba:	d00c      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ebc:	4b8f      	ldr	r3, [pc, #572]	; (80020fc <HAL_RCC_OscConfig+0x26c>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 030c 	and.w	r3, r3, #12
 8001ec4:	2b08      	cmp	r3, #8
 8001ec6:	d112      	bne.n	8001eee <HAL_RCC_OscConfig+0x5e>
 8001ec8:	4b8c      	ldr	r3, [pc, #560]	; (80020fc <HAL_RCC_OscConfig+0x26c>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ed4:	d10b      	bne.n	8001eee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed6:	4b89      	ldr	r3, [pc, #548]	; (80020fc <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d06c      	beq.n	8001fbc <HAL_RCC_OscConfig+0x12c>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d168      	bne.n	8001fbc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e246      	b.n	800237c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ef6:	d106      	bne.n	8001f06 <HAL_RCC_OscConfig+0x76>
 8001ef8:	4b80      	ldr	r3, [pc, #512]	; (80020fc <HAL_RCC_OscConfig+0x26c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a7f      	ldr	r2, [pc, #508]	; (80020fc <HAL_RCC_OscConfig+0x26c>)
 8001efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f02:	6013      	str	r3, [r2, #0]
 8001f04:	e02e      	b.n	8001f64 <HAL_RCC_OscConfig+0xd4>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d10c      	bne.n	8001f28 <HAL_RCC_OscConfig+0x98>
 8001f0e:	4b7b      	ldr	r3, [pc, #492]	; (80020fc <HAL_RCC_OscConfig+0x26c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a7a      	ldr	r2, [pc, #488]	; (80020fc <HAL_RCC_OscConfig+0x26c>)
 8001f14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f18:	6013      	str	r3, [r2, #0]
 8001f1a:	4b78      	ldr	r3, [pc, #480]	; (80020fc <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a77      	ldr	r2, [pc, #476]	; (80020fc <HAL_RCC_OscConfig+0x26c>)
 8001f20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f24:	6013      	str	r3, [r2, #0]
 8001f26:	e01d      	b.n	8001f64 <HAL_RCC_OscConfig+0xd4>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f30:	d10c      	bne.n	8001f4c <HAL_RCC_OscConfig+0xbc>
 8001f32:	4b72      	ldr	r3, [pc, #456]	; (80020fc <HAL_RCC_OscConfig+0x26c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a71      	ldr	r2, [pc, #452]	; (80020fc <HAL_RCC_OscConfig+0x26c>)
 8001f38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f3c:	6013      	str	r3, [r2, #0]
 8001f3e:	4b6f      	ldr	r3, [pc, #444]	; (80020fc <HAL_RCC_OscConfig+0x26c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a6e      	ldr	r2, [pc, #440]	; (80020fc <HAL_RCC_OscConfig+0x26c>)
 8001f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f48:	6013      	str	r3, [r2, #0]
 8001f4a:	e00b      	b.n	8001f64 <HAL_RCC_OscConfig+0xd4>
 8001f4c:	4b6b      	ldr	r3, [pc, #428]	; (80020fc <HAL_RCC_OscConfig+0x26c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a6a      	ldr	r2, [pc, #424]	; (80020fc <HAL_RCC_OscConfig+0x26c>)
 8001f52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f56:	6013      	str	r3, [r2, #0]
 8001f58:	4b68      	ldr	r3, [pc, #416]	; (80020fc <HAL_RCC_OscConfig+0x26c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a67      	ldr	r2, [pc, #412]	; (80020fc <HAL_RCC_OscConfig+0x26c>)
 8001f5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f62:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d013      	beq.n	8001f94 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6c:	f7ff fcce 	bl	800190c <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f74:	f7ff fcca 	bl	800190c <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b64      	cmp	r3, #100	; 0x64
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e1fa      	b.n	800237c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f86:	4b5d      	ldr	r3, [pc, #372]	; (80020fc <HAL_RCC_OscConfig+0x26c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d0f0      	beq.n	8001f74 <HAL_RCC_OscConfig+0xe4>
 8001f92:	e014      	b.n	8001fbe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f94:	f7ff fcba 	bl	800190c <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f9c:	f7ff fcb6 	bl	800190c <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b64      	cmp	r3, #100	; 0x64
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e1e6      	b.n	800237c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fae:	4b53      	ldr	r3, [pc, #332]	; (80020fc <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f0      	bne.n	8001f9c <HAL_RCC_OscConfig+0x10c>
 8001fba:	e000      	b.n	8001fbe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d063      	beq.n	8002092 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fca:	4b4c      	ldr	r3, [pc, #304]	; (80020fc <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f003 030c 	and.w	r3, r3, #12
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d00b      	beq.n	8001fee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fd6:	4b49      	ldr	r3, [pc, #292]	; (80020fc <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f003 030c 	and.w	r3, r3, #12
 8001fde:	2b08      	cmp	r3, #8
 8001fe0:	d11c      	bne.n	800201c <HAL_RCC_OscConfig+0x18c>
 8001fe2:	4b46      	ldr	r3, [pc, #280]	; (80020fc <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d116      	bne.n	800201c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fee:	4b43      	ldr	r3, [pc, #268]	; (80020fc <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d005      	beq.n	8002006 <HAL_RCC_OscConfig+0x176>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d001      	beq.n	8002006 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e1ba      	b.n	800237c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002006:	4b3d      	ldr	r3, [pc, #244]	; (80020fc <HAL_RCC_OscConfig+0x26c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	4939      	ldr	r1, [pc, #228]	; (80020fc <HAL_RCC_OscConfig+0x26c>)
 8002016:	4313      	orrs	r3, r2
 8002018:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800201a:	e03a      	b.n	8002092 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d020      	beq.n	8002066 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002024:	4b36      	ldr	r3, [pc, #216]	; (8002100 <HAL_RCC_OscConfig+0x270>)
 8002026:	2201      	movs	r2, #1
 8002028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202a:	f7ff fc6f 	bl	800190c <HAL_GetTick>
 800202e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002030:	e008      	b.n	8002044 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002032:	f7ff fc6b 	bl	800190c <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e19b      	b.n	800237c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002044:	4b2d      	ldr	r3, [pc, #180]	; (80020fc <HAL_RCC_OscConfig+0x26c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0f0      	beq.n	8002032 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002050:	4b2a      	ldr	r3, [pc, #168]	; (80020fc <HAL_RCC_OscConfig+0x26c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	695b      	ldr	r3, [r3, #20]
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	4927      	ldr	r1, [pc, #156]	; (80020fc <HAL_RCC_OscConfig+0x26c>)
 8002060:	4313      	orrs	r3, r2
 8002062:	600b      	str	r3, [r1, #0]
 8002064:	e015      	b.n	8002092 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002066:	4b26      	ldr	r3, [pc, #152]	; (8002100 <HAL_RCC_OscConfig+0x270>)
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206c:	f7ff fc4e 	bl	800190c <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002074:	f7ff fc4a 	bl	800190c <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e17a      	b.n	800237c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002086:	4b1d      	ldr	r3, [pc, #116]	; (80020fc <HAL_RCC_OscConfig+0x26c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f0      	bne.n	8002074 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0308 	and.w	r3, r3, #8
 800209a:	2b00      	cmp	r3, #0
 800209c:	d03a      	beq.n	8002114 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d019      	beq.n	80020da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020a6:	4b17      	ldr	r3, [pc, #92]	; (8002104 <HAL_RCC_OscConfig+0x274>)
 80020a8:	2201      	movs	r2, #1
 80020aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ac:	f7ff fc2e 	bl	800190c <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020b4:	f7ff fc2a 	bl	800190c <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e15a      	b.n	800237c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020c6:	4b0d      	ldr	r3, [pc, #52]	; (80020fc <HAL_RCC_OscConfig+0x26c>)
 80020c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d0f0      	beq.n	80020b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020d2:	2001      	movs	r0, #1
 80020d4:	f000 fa9a 	bl	800260c <RCC_Delay>
 80020d8:	e01c      	b.n	8002114 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020da:	4b0a      	ldr	r3, [pc, #40]	; (8002104 <HAL_RCC_OscConfig+0x274>)
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e0:	f7ff fc14 	bl	800190c <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020e6:	e00f      	b.n	8002108 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020e8:	f7ff fc10 	bl	800190c <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d908      	bls.n	8002108 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e140      	b.n	800237c <HAL_RCC_OscConfig+0x4ec>
 80020fa:	bf00      	nop
 80020fc:	40021000 	.word	0x40021000
 8002100:	42420000 	.word	0x42420000
 8002104:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002108:	4b9e      	ldr	r3, [pc, #632]	; (8002384 <HAL_RCC_OscConfig+0x4f4>)
 800210a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1e9      	bne.n	80020e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0304 	and.w	r3, r3, #4
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 80a6 	beq.w	800226e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002122:	2300      	movs	r3, #0
 8002124:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002126:	4b97      	ldr	r3, [pc, #604]	; (8002384 <HAL_RCC_OscConfig+0x4f4>)
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10d      	bne.n	800214e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002132:	4b94      	ldr	r3, [pc, #592]	; (8002384 <HAL_RCC_OscConfig+0x4f4>)
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	4a93      	ldr	r2, [pc, #588]	; (8002384 <HAL_RCC_OscConfig+0x4f4>)
 8002138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800213c:	61d3      	str	r3, [r2, #28]
 800213e:	4b91      	ldr	r3, [pc, #580]	; (8002384 <HAL_RCC_OscConfig+0x4f4>)
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002146:	60bb      	str	r3, [r7, #8]
 8002148:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800214a:	2301      	movs	r3, #1
 800214c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800214e:	4b8e      	ldr	r3, [pc, #568]	; (8002388 <HAL_RCC_OscConfig+0x4f8>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002156:	2b00      	cmp	r3, #0
 8002158:	d118      	bne.n	800218c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800215a:	4b8b      	ldr	r3, [pc, #556]	; (8002388 <HAL_RCC_OscConfig+0x4f8>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a8a      	ldr	r2, [pc, #552]	; (8002388 <HAL_RCC_OscConfig+0x4f8>)
 8002160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002164:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002166:	f7ff fbd1 	bl	800190c <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800216e:	f7ff fbcd 	bl	800190c <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b64      	cmp	r3, #100	; 0x64
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e0fd      	b.n	800237c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002180:	4b81      	ldr	r3, [pc, #516]	; (8002388 <HAL_RCC_OscConfig+0x4f8>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002188:	2b00      	cmp	r3, #0
 800218a:	d0f0      	beq.n	800216e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d106      	bne.n	80021a2 <HAL_RCC_OscConfig+0x312>
 8002194:	4b7b      	ldr	r3, [pc, #492]	; (8002384 <HAL_RCC_OscConfig+0x4f4>)
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	4a7a      	ldr	r2, [pc, #488]	; (8002384 <HAL_RCC_OscConfig+0x4f4>)
 800219a:	f043 0301 	orr.w	r3, r3, #1
 800219e:	6213      	str	r3, [r2, #32]
 80021a0:	e02d      	b.n	80021fe <HAL_RCC_OscConfig+0x36e>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10c      	bne.n	80021c4 <HAL_RCC_OscConfig+0x334>
 80021aa:	4b76      	ldr	r3, [pc, #472]	; (8002384 <HAL_RCC_OscConfig+0x4f4>)
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	4a75      	ldr	r2, [pc, #468]	; (8002384 <HAL_RCC_OscConfig+0x4f4>)
 80021b0:	f023 0301 	bic.w	r3, r3, #1
 80021b4:	6213      	str	r3, [r2, #32]
 80021b6:	4b73      	ldr	r3, [pc, #460]	; (8002384 <HAL_RCC_OscConfig+0x4f4>)
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	4a72      	ldr	r2, [pc, #456]	; (8002384 <HAL_RCC_OscConfig+0x4f4>)
 80021bc:	f023 0304 	bic.w	r3, r3, #4
 80021c0:	6213      	str	r3, [r2, #32]
 80021c2:	e01c      	b.n	80021fe <HAL_RCC_OscConfig+0x36e>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	2b05      	cmp	r3, #5
 80021ca:	d10c      	bne.n	80021e6 <HAL_RCC_OscConfig+0x356>
 80021cc:	4b6d      	ldr	r3, [pc, #436]	; (8002384 <HAL_RCC_OscConfig+0x4f4>)
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	4a6c      	ldr	r2, [pc, #432]	; (8002384 <HAL_RCC_OscConfig+0x4f4>)
 80021d2:	f043 0304 	orr.w	r3, r3, #4
 80021d6:	6213      	str	r3, [r2, #32]
 80021d8:	4b6a      	ldr	r3, [pc, #424]	; (8002384 <HAL_RCC_OscConfig+0x4f4>)
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	4a69      	ldr	r2, [pc, #420]	; (8002384 <HAL_RCC_OscConfig+0x4f4>)
 80021de:	f043 0301 	orr.w	r3, r3, #1
 80021e2:	6213      	str	r3, [r2, #32]
 80021e4:	e00b      	b.n	80021fe <HAL_RCC_OscConfig+0x36e>
 80021e6:	4b67      	ldr	r3, [pc, #412]	; (8002384 <HAL_RCC_OscConfig+0x4f4>)
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	4a66      	ldr	r2, [pc, #408]	; (8002384 <HAL_RCC_OscConfig+0x4f4>)
 80021ec:	f023 0301 	bic.w	r3, r3, #1
 80021f0:	6213      	str	r3, [r2, #32]
 80021f2:	4b64      	ldr	r3, [pc, #400]	; (8002384 <HAL_RCC_OscConfig+0x4f4>)
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	4a63      	ldr	r2, [pc, #396]	; (8002384 <HAL_RCC_OscConfig+0x4f4>)
 80021f8:	f023 0304 	bic.w	r3, r3, #4
 80021fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d015      	beq.n	8002232 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002206:	f7ff fb81 	bl	800190c <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800220c:	e00a      	b.n	8002224 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800220e:	f7ff fb7d 	bl	800190c <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	f241 3288 	movw	r2, #5000	; 0x1388
 800221c:	4293      	cmp	r3, r2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e0ab      	b.n	800237c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002224:	4b57      	ldr	r3, [pc, #348]	; (8002384 <HAL_RCC_OscConfig+0x4f4>)
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d0ee      	beq.n	800220e <HAL_RCC_OscConfig+0x37e>
 8002230:	e014      	b.n	800225c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002232:	f7ff fb6b 	bl	800190c <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002238:	e00a      	b.n	8002250 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223a:	f7ff fb67 	bl	800190c <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	f241 3288 	movw	r2, #5000	; 0x1388
 8002248:	4293      	cmp	r3, r2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e095      	b.n	800237c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002250:	4b4c      	ldr	r3, [pc, #304]	; (8002384 <HAL_RCC_OscConfig+0x4f4>)
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1ee      	bne.n	800223a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800225c:	7dfb      	ldrb	r3, [r7, #23]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d105      	bne.n	800226e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002262:	4b48      	ldr	r3, [pc, #288]	; (8002384 <HAL_RCC_OscConfig+0x4f4>)
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	4a47      	ldr	r2, [pc, #284]	; (8002384 <HAL_RCC_OscConfig+0x4f4>)
 8002268:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800226c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	69db      	ldr	r3, [r3, #28]
 8002272:	2b00      	cmp	r3, #0
 8002274:	f000 8081 	beq.w	800237a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002278:	4b42      	ldr	r3, [pc, #264]	; (8002384 <HAL_RCC_OscConfig+0x4f4>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f003 030c 	and.w	r3, r3, #12
 8002280:	2b08      	cmp	r3, #8
 8002282:	d061      	beq.n	8002348 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	69db      	ldr	r3, [r3, #28]
 8002288:	2b02      	cmp	r3, #2
 800228a:	d146      	bne.n	800231a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800228c:	4b3f      	ldr	r3, [pc, #252]	; (800238c <HAL_RCC_OscConfig+0x4fc>)
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002292:	f7ff fb3b 	bl	800190c <HAL_GetTick>
 8002296:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002298:	e008      	b.n	80022ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800229a:	f7ff fb37 	bl	800190c <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e067      	b.n	800237c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ac:	4b35      	ldr	r3, [pc, #212]	; (8002384 <HAL_RCC_OscConfig+0x4f4>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1f0      	bne.n	800229a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022c0:	d108      	bne.n	80022d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022c2:	4b30      	ldr	r3, [pc, #192]	; (8002384 <HAL_RCC_OscConfig+0x4f4>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	492d      	ldr	r1, [pc, #180]	; (8002384 <HAL_RCC_OscConfig+0x4f4>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022d4:	4b2b      	ldr	r3, [pc, #172]	; (8002384 <HAL_RCC_OscConfig+0x4f4>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a19      	ldr	r1, [r3, #32]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e4:	430b      	orrs	r3, r1
 80022e6:	4927      	ldr	r1, [pc, #156]	; (8002384 <HAL_RCC_OscConfig+0x4f4>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022ec:	4b27      	ldr	r3, [pc, #156]	; (800238c <HAL_RCC_OscConfig+0x4fc>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f2:	f7ff fb0b 	bl	800190c <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022f8:	e008      	b.n	800230c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022fa:	f7ff fb07 	bl	800190c <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e037      	b.n	800237c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800230c:	4b1d      	ldr	r3, [pc, #116]	; (8002384 <HAL_RCC_OscConfig+0x4f4>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0f0      	beq.n	80022fa <HAL_RCC_OscConfig+0x46a>
 8002318:	e02f      	b.n	800237a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800231a:	4b1c      	ldr	r3, [pc, #112]	; (800238c <HAL_RCC_OscConfig+0x4fc>)
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002320:	f7ff faf4 	bl	800190c <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002328:	f7ff faf0 	bl	800190c <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e020      	b.n	800237c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800233a:	4b12      	ldr	r3, [pc, #72]	; (8002384 <HAL_RCC_OscConfig+0x4f4>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1f0      	bne.n	8002328 <HAL_RCC_OscConfig+0x498>
 8002346:	e018      	b.n	800237a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	69db      	ldr	r3, [r3, #28]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d101      	bne.n	8002354 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e013      	b.n	800237c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002354:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <HAL_RCC_OscConfig+0x4f4>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	429a      	cmp	r2, r3
 8002366:	d106      	bne.n	8002376 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002372:	429a      	cmp	r2, r3
 8002374:	d001      	beq.n	800237a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e000      	b.n	800237c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40021000 	.word	0x40021000
 8002388:	40007000 	.word	0x40007000
 800238c:	42420060 	.word	0x42420060

08002390 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e0d0      	b.n	8002546 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023a4:	4b6a      	ldr	r3, [pc, #424]	; (8002550 <HAL_RCC_ClockConfig+0x1c0>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d910      	bls.n	80023d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b2:	4b67      	ldr	r3, [pc, #412]	; (8002550 <HAL_RCC_ClockConfig+0x1c0>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f023 0207 	bic.w	r2, r3, #7
 80023ba:	4965      	ldr	r1, [pc, #404]	; (8002550 <HAL_RCC_ClockConfig+0x1c0>)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	4313      	orrs	r3, r2
 80023c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c2:	4b63      	ldr	r3, [pc, #396]	; (8002550 <HAL_RCC_ClockConfig+0x1c0>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d001      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e0b8      	b.n	8002546 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d020      	beq.n	8002422 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d005      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023ec:	4b59      	ldr	r3, [pc, #356]	; (8002554 <HAL_RCC_ClockConfig+0x1c4>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	4a58      	ldr	r2, [pc, #352]	; (8002554 <HAL_RCC_ClockConfig+0x1c4>)
 80023f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0308 	and.w	r3, r3, #8
 8002400:	2b00      	cmp	r3, #0
 8002402:	d005      	beq.n	8002410 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002404:	4b53      	ldr	r3, [pc, #332]	; (8002554 <HAL_RCC_ClockConfig+0x1c4>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	4a52      	ldr	r2, [pc, #328]	; (8002554 <HAL_RCC_ClockConfig+0x1c4>)
 800240a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800240e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002410:	4b50      	ldr	r3, [pc, #320]	; (8002554 <HAL_RCC_ClockConfig+0x1c4>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	494d      	ldr	r1, [pc, #308]	; (8002554 <HAL_RCC_ClockConfig+0x1c4>)
 800241e:	4313      	orrs	r3, r2
 8002420:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b00      	cmp	r3, #0
 800242c:	d040      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d107      	bne.n	8002446 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002436:	4b47      	ldr	r3, [pc, #284]	; (8002554 <HAL_RCC_ClockConfig+0x1c4>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d115      	bne.n	800246e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e07f      	b.n	8002546 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b02      	cmp	r3, #2
 800244c:	d107      	bne.n	800245e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800244e:	4b41      	ldr	r3, [pc, #260]	; (8002554 <HAL_RCC_ClockConfig+0x1c4>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d109      	bne.n	800246e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e073      	b.n	8002546 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800245e:	4b3d      	ldr	r3, [pc, #244]	; (8002554 <HAL_RCC_ClockConfig+0x1c4>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e06b      	b.n	8002546 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800246e:	4b39      	ldr	r3, [pc, #228]	; (8002554 <HAL_RCC_ClockConfig+0x1c4>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f023 0203 	bic.w	r2, r3, #3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	4936      	ldr	r1, [pc, #216]	; (8002554 <HAL_RCC_ClockConfig+0x1c4>)
 800247c:	4313      	orrs	r3, r2
 800247e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002480:	f7ff fa44 	bl	800190c <HAL_GetTick>
 8002484:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002486:	e00a      	b.n	800249e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002488:	f7ff fa40 	bl	800190c <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	f241 3288 	movw	r2, #5000	; 0x1388
 8002496:	4293      	cmp	r3, r2
 8002498:	d901      	bls.n	800249e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e053      	b.n	8002546 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249e:	4b2d      	ldr	r3, [pc, #180]	; (8002554 <HAL_RCC_ClockConfig+0x1c4>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f003 020c 	and.w	r2, r3, #12
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d1eb      	bne.n	8002488 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024b0:	4b27      	ldr	r3, [pc, #156]	; (8002550 <HAL_RCC_ClockConfig+0x1c0>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d210      	bcs.n	80024e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024be:	4b24      	ldr	r3, [pc, #144]	; (8002550 <HAL_RCC_ClockConfig+0x1c0>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f023 0207 	bic.w	r2, r3, #7
 80024c6:	4922      	ldr	r1, [pc, #136]	; (8002550 <HAL_RCC_ClockConfig+0x1c0>)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ce:	4b20      	ldr	r3, [pc, #128]	; (8002550 <HAL_RCC_ClockConfig+0x1c0>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d001      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e032      	b.n	8002546 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d008      	beq.n	80024fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024ec:	4b19      	ldr	r3, [pc, #100]	; (8002554 <HAL_RCC_ClockConfig+0x1c4>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	4916      	ldr	r1, [pc, #88]	; (8002554 <HAL_RCC_ClockConfig+0x1c4>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0308 	and.w	r3, r3, #8
 8002506:	2b00      	cmp	r3, #0
 8002508:	d009      	beq.n	800251e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800250a:	4b12      	ldr	r3, [pc, #72]	; (8002554 <HAL_RCC_ClockConfig+0x1c4>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	490e      	ldr	r1, [pc, #56]	; (8002554 <HAL_RCC_ClockConfig+0x1c4>)
 800251a:	4313      	orrs	r3, r2
 800251c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800251e:	f000 f821 	bl	8002564 <HAL_RCC_GetSysClockFreq>
 8002522:	4602      	mov	r2, r0
 8002524:	4b0b      	ldr	r3, [pc, #44]	; (8002554 <HAL_RCC_ClockConfig+0x1c4>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	091b      	lsrs	r3, r3, #4
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	490a      	ldr	r1, [pc, #40]	; (8002558 <HAL_RCC_ClockConfig+0x1c8>)
 8002530:	5ccb      	ldrb	r3, [r1, r3]
 8002532:	fa22 f303 	lsr.w	r3, r2, r3
 8002536:	4a09      	ldr	r2, [pc, #36]	; (800255c <HAL_RCC_ClockConfig+0x1cc>)
 8002538:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800253a:	4b09      	ldr	r3, [pc, #36]	; (8002560 <HAL_RCC_ClockConfig+0x1d0>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff f9a2 	bl	8001888 <HAL_InitTick>

  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40022000 	.word	0x40022000
 8002554:	40021000 	.word	0x40021000
 8002558:	08002e70 	.word	0x08002e70
 800255c:	20000040 	.word	0x20000040
 8002560:	20000044 	.word	0x20000044

08002564 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002564:	b480      	push	{r7}
 8002566:	b087      	sub	sp, #28
 8002568:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800256a:	2300      	movs	r3, #0
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	2300      	movs	r3, #0
 8002570:	60bb      	str	r3, [r7, #8]
 8002572:	2300      	movs	r3, #0
 8002574:	617b      	str	r3, [r7, #20]
 8002576:	2300      	movs	r3, #0
 8002578:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800257a:	2300      	movs	r3, #0
 800257c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800257e:	4b1e      	ldr	r3, [pc, #120]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f003 030c 	and.w	r3, r3, #12
 800258a:	2b04      	cmp	r3, #4
 800258c:	d002      	beq.n	8002594 <HAL_RCC_GetSysClockFreq+0x30>
 800258e:	2b08      	cmp	r3, #8
 8002590:	d003      	beq.n	800259a <HAL_RCC_GetSysClockFreq+0x36>
 8002592:	e027      	b.n	80025e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002594:	4b19      	ldr	r3, [pc, #100]	; (80025fc <HAL_RCC_GetSysClockFreq+0x98>)
 8002596:	613b      	str	r3, [r7, #16]
      break;
 8002598:	e027      	b.n	80025ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	0c9b      	lsrs	r3, r3, #18
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	4a17      	ldr	r2, [pc, #92]	; (8002600 <HAL_RCC_GetSysClockFreq+0x9c>)
 80025a4:	5cd3      	ldrb	r3, [r2, r3]
 80025a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d010      	beq.n	80025d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025b2:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	0c5b      	lsrs	r3, r3, #17
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	4a11      	ldr	r2, [pc, #68]	; (8002604 <HAL_RCC_GetSysClockFreq+0xa0>)
 80025be:	5cd3      	ldrb	r3, [r2, r3]
 80025c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a0d      	ldr	r2, [pc, #52]	; (80025fc <HAL_RCC_GetSysClockFreq+0x98>)
 80025c6:	fb02 f203 	mul.w	r2, r2, r3
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d0:	617b      	str	r3, [r7, #20]
 80025d2:	e004      	b.n	80025de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a0c      	ldr	r2, [pc, #48]	; (8002608 <HAL_RCC_GetSysClockFreq+0xa4>)
 80025d8:	fb02 f303 	mul.w	r3, r2, r3
 80025dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	613b      	str	r3, [r7, #16]
      break;
 80025e2:	e002      	b.n	80025ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025e4:	4b05      	ldr	r3, [pc, #20]	; (80025fc <HAL_RCC_GetSysClockFreq+0x98>)
 80025e6:	613b      	str	r3, [r7, #16]
      break;
 80025e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025ea:	693b      	ldr	r3, [r7, #16]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	371c      	adds	r7, #28
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bc80      	pop	{r7}
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	40021000 	.word	0x40021000
 80025fc:	007a1200 	.word	0x007a1200
 8002600:	08002e80 	.word	0x08002e80
 8002604:	08002e90 	.word	0x08002e90
 8002608:	003d0900 	.word	0x003d0900

0800260c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002614:	4b0a      	ldr	r3, [pc, #40]	; (8002640 <RCC_Delay+0x34>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a0a      	ldr	r2, [pc, #40]	; (8002644 <RCC_Delay+0x38>)
 800261a:	fba2 2303 	umull	r2, r3, r2, r3
 800261e:	0a5b      	lsrs	r3, r3, #9
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	fb02 f303 	mul.w	r3, r2, r3
 8002626:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002628:	bf00      	nop
  }
  while (Delay --);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	1e5a      	subs	r2, r3, #1
 800262e:	60fa      	str	r2, [r7, #12]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1f9      	bne.n	8002628 <RCC_Delay+0x1c>
}
 8002634:	bf00      	nop
 8002636:	bf00      	nop
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr
 8002640:	20000040 	.word	0x20000040
 8002644:	10624dd3 	.word	0x10624dd3

08002648 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e041      	b.n	80026de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d106      	bne.n	8002674 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7ff f83a 	bl	80016e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2202      	movs	r2, #2
 8002678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	3304      	adds	r3, #4
 8002684:	4619      	mov	r1, r3
 8002686:	4610      	mov	r0, r2
 8002688:	f000 fa56 	bl	8002b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
	...

080026e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d001      	beq.n	8002700 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e035      	b.n	800276c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2202      	movs	r2, #2
 8002704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68da      	ldr	r2, [r3, #12]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f042 0201 	orr.w	r2, r2, #1
 8002716:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a16      	ldr	r2, [pc, #88]	; (8002778 <HAL_TIM_Base_Start_IT+0x90>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d009      	beq.n	8002736 <HAL_TIM_Base_Start_IT+0x4e>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800272a:	d004      	beq.n	8002736 <HAL_TIM_Base_Start_IT+0x4e>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a12      	ldr	r2, [pc, #72]	; (800277c <HAL_TIM_Base_Start_IT+0x94>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d111      	bne.n	800275a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2b06      	cmp	r3, #6
 8002746:	d010      	beq.n	800276a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f042 0201 	orr.w	r2, r2, #1
 8002756:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002758:	e007      	b.n	800276a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f042 0201 	orr.w	r2, r2, #1
 8002768:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	bc80      	pop	{r7}
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	40012c00 	.word	0x40012c00
 800277c:	40000400 	.word	0x40000400

08002780 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d020      	beq.n	80027e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d01b      	beq.n	80027e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f06f 0202 	mvn.w	r2, #2
 80027b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	f003 0303 	and.w	r3, r3, #3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f998 	bl	8002b00 <HAL_TIM_IC_CaptureCallback>
 80027d0:	e005      	b.n	80027de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f98b 	bl	8002aee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 f99a 	bl	8002b12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	f003 0304 	and.w	r3, r3, #4
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d020      	beq.n	8002830 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f003 0304 	and.w	r3, r3, #4
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d01b      	beq.n	8002830 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f06f 0204 	mvn.w	r2, #4
 8002800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2202      	movs	r2, #2
 8002806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f972 	bl	8002b00 <HAL_TIM_IC_CaptureCallback>
 800281c:	e005      	b.n	800282a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f965 	bl	8002aee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 f974 	bl	8002b12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	2b00      	cmp	r3, #0
 8002838:	d020      	beq.n	800287c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f003 0308 	and.w	r3, r3, #8
 8002840:	2b00      	cmp	r3, #0
 8002842:	d01b      	beq.n	800287c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f06f 0208 	mvn.w	r2, #8
 800284c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2204      	movs	r2, #4
 8002852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f94c 	bl	8002b00 <HAL_TIM_IC_CaptureCallback>
 8002868:	e005      	b.n	8002876 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 f93f 	bl	8002aee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 f94e 	bl	8002b12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	f003 0310 	and.w	r3, r3, #16
 8002882:	2b00      	cmp	r3, #0
 8002884:	d020      	beq.n	80028c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f003 0310 	and.w	r3, r3, #16
 800288c:	2b00      	cmp	r3, #0
 800288e:	d01b      	beq.n	80028c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f06f 0210 	mvn.w	r2, #16
 8002898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2208      	movs	r2, #8
 800289e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 f926 	bl	8002b00 <HAL_TIM_IC_CaptureCallback>
 80028b4:	e005      	b.n	80028c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f919 	bl	8002aee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 f928 	bl	8002b12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00c      	beq.n	80028ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d007      	beq.n	80028ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f06f 0201 	mvn.w	r2, #1
 80028e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7fe fdfc 	bl	80014e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00c      	beq.n	8002910 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d007      	beq.n	8002910 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 fa6f 	bl	8002dee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00c      	beq.n	8002934 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002920:	2b00      	cmp	r3, #0
 8002922:	d007      	beq.n	8002934 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800292c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f8f8 	bl	8002b24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	f003 0320 	and.w	r3, r3, #32
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00c      	beq.n	8002958 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f003 0320 	and.w	r3, r3, #32
 8002944:	2b00      	cmp	r3, #0
 8002946:	d007      	beq.n	8002958 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f06f 0220 	mvn.w	r2, #32
 8002950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 fa42 	bl	8002ddc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002958:	bf00      	nop
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800296a:	2300      	movs	r3, #0
 800296c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002974:	2b01      	cmp	r3, #1
 8002976:	d101      	bne.n	800297c <HAL_TIM_ConfigClockSource+0x1c>
 8002978:	2302      	movs	r3, #2
 800297a:	e0b4      	b.n	8002ae6 <HAL_TIM_ConfigClockSource+0x186>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2202      	movs	r2, #2
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800299a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68ba      	ldr	r2, [r7, #8]
 80029aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029b4:	d03e      	beq.n	8002a34 <HAL_TIM_ConfigClockSource+0xd4>
 80029b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ba:	f200 8087 	bhi.w	8002acc <HAL_TIM_ConfigClockSource+0x16c>
 80029be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029c2:	f000 8086 	beq.w	8002ad2 <HAL_TIM_ConfigClockSource+0x172>
 80029c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ca:	d87f      	bhi.n	8002acc <HAL_TIM_ConfigClockSource+0x16c>
 80029cc:	2b70      	cmp	r3, #112	; 0x70
 80029ce:	d01a      	beq.n	8002a06 <HAL_TIM_ConfigClockSource+0xa6>
 80029d0:	2b70      	cmp	r3, #112	; 0x70
 80029d2:	d87b      	bhi.n	8002acc <HAL_TIM_ConfigClockSource+0x16c>
 80029d4:	2b60      	cmp	r3, #96	; 0x60
 80029d6:	d050      	beq.n	8002a7a <HAL_TIM_ConfigClockSource+0x11a>
 80029d8:	2b60      	cmp	r3, #96	; 0x60
 80029da:	d877      	bhi.n	8002acc <HAL_TIM_ConfigClockSource+0x16c>
 80029dc:	2b50      	cmp	r3, #80	; 0x50
 80029de:	d03c      	beq.n	8002a5a <HAL_TIM_ConfigClockSource+0xfa>
 80029e0:	2b50      	cmp	r3, #80	; 0x50
 80029e2:	d873      	bhi.n	8002acc <HAL_TIM_ConfigClockSource+0x16c>
 80029e4:	2b40      	cmp	r3, #64	; 0x40
 80029e6:	d058      	beq.n	8002a9a <HAL_TIM_ConfigClockSource+0x13a>
 80029e8:	2b40      	cmp	r3, #64	; 0x40
 80029ea:	d86f      	bhi.n	8002acc <HAL_TIM_ConfigClockSource+0x16c>
 80029ec:	2b30      	cmp	r3, #48	; 0x30
 80029ee:	d064      	beq.n	8002aba <HAL_TIM_ConfigClockSource+0x15a>
 80029f0:	2b30      	cmp	r3, #48	; 0x30
 80029f2:	d86b      	bhi.n	8002acc <HAL_TIM_ConfigClockSource+0x16c>
 80029f4:	2b20      	cmp	r3, #32
 80029f6:	d060      	beq.n	8002aba <HAL_TIM_ConfigClockSource+0x15a>
 80029f8:	2b20      	cmp	r3, #32
 80029fa:	d867      	bhi.n	8002acc <HAL_TIM_ConfigClockSource+0x16c>
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d05c      	beq.n	8002aba <HAL_TIM_ConfigClockSource+0x15a>
 8002a00:	2b10      	cmp	r3, #16
 8002a02:	d05a      	beq.n	8002aba <HAL_TIM_ConfigClockSource+0x15a>
 8002a04:	e062      	b.n	8002acc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6818      	ldr	r0, [r3, #0]
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	6899      	ldr	r1, [r3, #8]
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685a      	ldr	r2, [r3, #4]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	f000 f96a 	bl	8002cee <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68ba      	ldr	r2, [r7, #8]
 8002a30:	609a      	str	r2, [r3, #8]
      break;
 8002a32:	e04f      	b.n	8002ad4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6818      	ldr	r0, [r3, #0]
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	6899      	ldr	r1, [r3, #8]
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	f000 f953 	bl	8002cee <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689a      	ldr	r2, [r3, #8]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a56:	609a      	str	r2, [r3, #8]
      break;
 8002a58:	e03c      	b.n	8002ad4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6818      	ldr	r0, [r3, #0]
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	6859      	ldr	r1, [r3, #4]
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	461a      	mov	r2, r3
 8002a68:	f000 f8ca 	bl	8002c00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2150      	movs	r1, #80	; 0x50
 8002a72:	4618      	mov	r0, r3
 8002a74:	f000 f921 	bl	8002cba <TIM_ITRx_SetConfig>
      break;
 8002a78:	e02c      	b.n	8002ad4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6818      	ldr	r0, [r3, #0]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	6859      	ldr	r1, [r3, #4]
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	461a      	mov	r2, r3
 8002a88:	f000 f8e8 	bl	8002c5c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2160      	movs	r1, #96	; 0x60
 8002a92:	4618      	mov	r0, r3
 8002a94:	f000 f911 	bl	8002cba <TIM_ITRx_SetConfig>
      break;
 8002a98:	e01c      	b.n	8002ad4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6818      	ldr	r0, [r3, #0]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	6859      	ldr	r1, [r3, #4]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	f000 f8aa 	bl	8002c00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2140      	movs	r1, #64	; 0x40
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 f901 	bl	8002cba <TIM_ITRx_SetConfig>
      break;
 8002ab8:	e00c      	b.n	8002ad4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4610      	mov	r0, r2
 8002ac6:	f000 f8f8 	bl	8002cba <TIM_ITRx_SetConfig>
      break;
 8002aca:	e003      	b.n	8002ad4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	73fb      	strb	r3, [r7, #15]
      break;
 8002ad0:	e000      	b.n	8002ad4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ad2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b083      	sub	sp, #12
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bc80      	pop	{r7}
 8002afe:	4770      	bx	lr

08002b00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bc80      	pop	{r7}
 8002b10:	4770      	bx	lr

08002b12 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b083      	sub	sp, #12
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr

08002b24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr
	...

08002b38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a2b      	ldr	r2, [pc, #172]	; (8002bf8 <TIM_Base_SetConfig+0xc0>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d007      	beq.n	8002b60 <TIM_Base_SetConfig+0x28>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b56:	d003      	beq.n	8002b60 <TIM_Base_SetConfig+0x28>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a28      	ldr	r2, [pc, #160]	; (8002bfc <TIM_Base_SetConfig+0xc4>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d108      	bne.n	8002b72 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a20      	ldr	r2, [pc, #128]	; (8002bf8 <TIM_Base_SetConfig+0xc0>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d007      	beq.n	8002b8a <TIM_Base_SetConfig+0x52>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b80:	d003      	beq.n	8002b8a <TIM_Base_SetConfig+0x52>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a1d      	ldr	r2, [pc, #116]	; (8002bfc <TIM_Base_SetConfig+0xc4>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d108      	bne.n	8002b9c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a0d      	ldr	r2, [pc, #52]	; (8002bf8 <TIM_Base_SetConfig+0xc0>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d103      	bne.n	8002bd0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	691a      	ldr	r2, [r3, #16]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d005      	beq.n	8002bee <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	f023 0201 	bic.w	r2, r3, #1
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	611a      	str	r2, [r3, #16]
  }
}
 8002bee:	bf00      	nop
 8002bf0:	3714      	adds	r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bc80      	pop	{r7}
 8002bf6:	4770      	bx	lr
 8002bf8:	40012c00 	.word	0x40012c00
 8002bfc:	40000400 	.word	0x40000400

08002c00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b087      	sub	sp, #28
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	f023 0201 	bic.w	r2, r3, #1
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	011b      	lsls	r3, r3, #4
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f023 030a 	bic.w	r3, r3, #10
 8002c3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	621a      	str	r2, [r3, #32]
}
 8002c52:	bf00      	nop
 8002c54:	371c      	adds	r7, #28
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bc80      	pop	{r7}
 8002c5a:	4770      	bx	lr

08002c5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b087      	sub	sp, #28
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	f023 0210 	bic.w	r2, r3, #16
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	031b      	lsls	r3, r3, #12
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c98:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	011b      	lsls	r3, r3, #4
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	621a      	str	r2, [r3, #32]
}
 8002cb0:	bf00      	nop
 8002cb2:	371c      	adds	r7, #28
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bc80      	pop	{r7}
 8002cb8:	4770      	bx	lr

08002cba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b085      	sub	sp, #20
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
 8002cc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	f043 0307 	orr.w	r3, r3, #7
 8002cdc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	609a      	str	r2, [r3, #8]
}
 8002ce4:	bf00      	nop
 8002ce6:	3714      	adds	r7, #20
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bc80      	pop	{r7}
 8002cec:	4770      	bx	lr

08002cee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b087      	sub	sp, #28
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	60f8      	str	r0, [r7, #12]
 8002cf6:	60b9      	str	r1, [r7, #8]
 8002cf8:	607a      	str	r2, [r7, #4]
 8002cfa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d08:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	021a      	lsls	r2, r3, #8
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	431a      	orrs	r2, r3
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	609a      	str	r2, [r3, #8]
}
 8002d22:	bf00      	nop
 8002d24:	371c      	adds	r7, #28
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bc80      	pop	{r7}
 8002d2a:	4770      	bx	lr

08002d2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d101      	bne.n	8002d44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d40:	2302      	movs	r3, #2
 8002d42:	e041      	b.n	8002dc8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a14      	ldr	r2, [pc, #80]	; (8002dd4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d009      	beq.n	8002d9c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d90:	d004      	beq.n	8002d9c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a10      	ldr	r2, [pc, #64]	; (8002dd8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d10c      	bne.n	8002db6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002da2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	68ba      	ldr	r2, [r7, #8]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3714      	adds	r7, #20
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bc80      	pop	{r7}
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	40012c00 	.word	0x40012c00
 8002dd8:	40000400 	.word	0x40000400

08002ddc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bc80      	pop	{r7}
 8002dec:	4770      	bx	lr

08002dee <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bc80      	pop	{r7}
 8002dfe:	4770      	bx	lr

08002e00 <__libc_init_array>:
 8002e00:	b570      	push	{r4, r5, r6, lr}
 8002e02:	2600      	movs	r6, #0
 8002e04:	4d0c      	ldr	r5, [pc, #48]	; (8002e38 <__libc_init_array+0x38>)
 8002e06:	4c0d      	ldr	r4, [pc, #52]	; (8002e3c <__libc_init_array+0x3c>)
 8002e08:	1b64      	subs	r4, r4, r5
 8002e0a:	10a4      	asrs	r4, r4, #2
 8002e0c:	42a6      	cmp	r6, r4
 8002e0e:	d109      	bne.n	8002e24 <__libc_init_array+0x24>
 8002e10:	f000 f822 	bl	8002e58 <_init>
 8002e14:	2600      	movs	r6, #0
 8002e16:	4d0a      	ldr	r5, [pc, #40]	; (8002e40 <__libc_init_array+0x40>)
 8002e18:	4c0a      	ldr	r4, [pc, #40]	; (8002e44 <__libc_init_array+0x44>)
 8002e1a:	1b64      	subs	r4, r4, r5
 8002e1c:	10a4      	asrs	r4, r4, #2
 8002e1e:	42a6      	cmp	r6, r4
 8002e20:	d105      	bne.n	8002e2e <__libc_init_array+0x2e>
 8002e22:	bd70      	pop	{r4, r5, r6, pc}
 8002e24:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e28:	4798      	blx	r3
 8002e2a:	3601      	adds	r6, #1
 8002e2c:	e7ee      	b.n	8002e0c <__libc_init_array+0xc>
 8002e2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e32:	4798      	blx	r3
 8002e34:	3601      	adds	r6, #1
 8002e36:	e7f2      	b.n	8002e1e <__libc_init_array+0x1e>
 8002e38:	08002e94 	.word	0x08002e94
 8002e3c:	08002e94 	.word	0x08002e94
 8002e40:	08002e94 	.word	0x08002e94
 8002e44:	08002e98 	.word	0x08002e98

08002e48 <memset>:
 8002e48:	4603      	mov	r3, r0
 8002e4a:	4402      	add	r2, r0
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d100      	bne.n	8002e52 <memset+0xa>
 8002e50:	4770      	bx	lr
 8002e52:	f803 1b01 	strb.w	r1, [r3], #1
 8002e56:	e7f9      	b.n	8002e4c <memset+0x4>

08002e58 <_init>:
 8002e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e5a:	bf00      	nop
 8002e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e5e:	bc08      	pop	{r3}
 8002e60:	469e      	mov	lr, r3
 8002e62:	4770      	bx	lr

08002e64 <_fini>:
 8002e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e66:	bf00      	nop
 8002e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e6a:	bc08      	pop	{r3}
 8002e6c:	469e      	mov	lr, r3
 8002e6e:	4770      	bx	lr
